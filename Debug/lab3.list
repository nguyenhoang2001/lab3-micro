
lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002914  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002a20  08002a20  00012a20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a40  08002a40  00020034  2**0
                  CONTENTS
  4 .ARM          00000000  08002a40  08002a40  00020034  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a40  08002a40  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a40  08002a40  00012a40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a44  08002a44  00012a44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  08002a48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  20000034  08002a7c  00020034  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000f4  08002a7c  000200f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .debug_info   000096a9  00000000  00000000  0002005d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001adc  00000000  00000000  00029706  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a60  00000000  00000000  0002b1e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000978  00000000  00000000  0002bc48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000169b8  00000000  00000000  0002c5c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b293  00000000  00000000  00042f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082387  00000000  00000000  0004e20b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d0592  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002984  00000000  00000000  000d05e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000034 	.word	0x20000034
 8000128:	00000000 	.word	0x00000000
 800012c:	08002a08 	.word	0x08002a08

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000038 	.word	0x20000038
 8000148:	08002a08 	.word	0x08002a08

0800014c <changeState1>:
static int time_yellow = 2;
static int time_green = 3;
static int able = 1;
static int call = 1;

void changeState1() {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0

	if(HAL_GPIO_ReadPin(RED_GPIO_Port, RED_Pin) == 1) {
 8000150:	2180      	movs	r1, #128	; 0x80
 8000152:	481e      	ldr	r0, [pc, #120]	; (80001cc <changeState1+0x80>)
 8000154:	f001 fc18 	bl	8001988 <HAL_GPIO_ReadPin>
 8000158:	4603      	mov	r3, r0
 800015a:	2b01      	cmp	r3, #1
 800015c:	d10b      	bne.n	8000176 <changeState1+0x2a>
		HAL_GPIO_WritePin(RED_GPIO_Port, RED_Pin, 0);
 800015e:	2200      	movs	r2, #0
 8000160:	2180      	movs	r1, #128	; 0x80
 8000162:	481a      	ldr	r0, [pc, #104]	; (80001cc <changeState1+0x80>)
 8000164:	f001 fc27 	bl	80019b6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_GPIO_Port, GREEN_Pin, 1);
 8000168:	2201      	movs	r2, #1
 800016a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800016e:	4817      	ldr	r0, [pc, #92]	; (80001cc <changeState1+0x80>)
 8000170:	f001 fc21 	bl	80019b6 <HAL_GPIO_WritePin>
	}
	else if(HAL_GPIO_ReadPin(GREEN_GPIO_Port, GREEN_Pin) == 1){
		HAL_GPIO_WritePin(GREEN_GPIO_Port, GREEN_Pin, 0);
		HAL_GPIO_WritePin(YELLOW_GPIO_Port, YELLOW_Pin, 1);
	}
}
 8000174:	e027      	b.n	80001c6 <changeState1+0x7a>
	else if(HAL_GPIO_ReadPin(YELLOW_GPIO_Port, YELLOW_Pin) == 1) {
 8000176:	f44f 7180 	mov.w	r1, #256	; 0x100
 800017a:	4814      	ldr	r0, [pc, #80]	; (80001cc <changeState1+0x80>)
 800017c:	f001 fc04 	bl	8001988 <HAL_GPIO_ReadPin>
 8000180:	4603      	mov	r3, r0
 8000182:	2b01      	cmp	r3, #1
 8000184:	d10b      	bne.n	800019e <changeState1+0x52>
		HAL_GPIO_WritePin(YELLOW_GPIO_Port, YELLOW_Pin, 0);
 8000186:	2200      	movs	r2, #0
 8000188:	f44f 7180 	mov.w	r1, #256	; 0x100
 800018c:	480f      	ldr	r0, [pc, #60]	; (80001cc <changeState1+0x80>)
 800018e:	f001 fc12 	bl	80019b6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED_GPIO_Port, RED_Pin, 1);
 8000192:	2201      	movs	r2, #1
 8000194:	2180      	movs	r1, #128	; 0x80
 8000196:	480d      	ldr	r0, [pc, #52]	; (80001cc <changeState1+0x80>)
 8000198:	f001 fc0d 	bl	80019b6 <HAL_GPIO_WritePin>
}
 800019c:	e013      	b.n	80001c6 <changeState1+0x7a>
	else if(HAL_GPIO_ReadPin(GREEN_GPIO_Port, GREEN_Pin) == 1){
 800019e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001a2:	480a      	ldr	r0, [pc, #40]	; (80001cc <changeState1+0x80>)
 80001a4:	f001 fbf0 	bl	8001988 <HAL_GPIO_ReadPin>
 80001a8:	4603      	mov	r3, r0
 80001aa:	2b01      	cmp	r3, #1
 80001ac:	d10b      	bne.n	80001c6 <changeState1+0x7a>
		HAL_GPIO_WritePin(GREEN_GPIO_Port, GREEN_Pin, 0);
 80001ae:	2200      	movs	r2, #0
 80001b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001b4:	4805      	ldr	r0, [pc, #20]	; (80001cc <changeState1+0x80>)
 80001b6:	f001 fbfe 	bl	80019b6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_GPIO_Port, YELLOW_Pin, 1);
 80001ba:	2201      	movs	r2, #1
 80001bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001c0:	4802      	ldr	r0, [pc, #8]	; (80001cc <changeState1+0x80>)
 80001c2:	f001 fbf8 	bl	80019b6 <HAL_GPIO_WritePin>
}
 80001c6:	bf00      	nop
 80001c8:	bd80      	pop	{r7, pc}
 80001ca:	bf00      	nop
 80001cc:	40010800 	.word	0x40010800

080001d0 <changeState2>:

void changeState2() {
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0

	if(HAL_GPIO_ReadPin(RED_HOR_GPIO_Port, RED_HOR_Pin) == 1) {
 80001d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001d8:	481e      	ldr	r0, [pc, #120]	; (8000254 <changeState2+0x84>)
 80001da:	f001 fbd5 	bl	8001988 <HAL_GPIO_ReadPin>
 80001de:	4603      	mov	r3, r0
 80001e0:	2b01      	cmp	r3, #1
 80001e2:	d10c      	bne.n	80001fe <changeState2+0x2e>
		HAL_GPIO_WritePin(RED_HOR_GPIO_Port, RED_HOR_Pin, 0);
 80001e4:	2200      	movs	r2, #0
 80001e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001ea:	481a      	ldr	r0, [pc, #104]	; (8000254 <changeState2+0x84>)
 80001ec:	f001 fbe3 	bl	80019b6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_HOR_GPIO_Port, GREEN_HOR_Pin, 1);
 80001f0:	2201      	movs	r2, #1
 80001f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001f6:	4817      	ldr	r0, [pc, #92]	; (8000254 <changeState2+0x84>)
 80001f8:	f001 fbdd 	bl	80019b6 <HAL_GPIO_WritePin>
	}
	else if(HAL_GPIO_ReadPin(GREEN_HOR_GPIO_Port, GREEN_HOR_Pin) == 1){
		HAL_GPIO_WritePin(GREEN_HOR_GPIO_Port, GREEN_HOR_Pin, 0);
		HAL_GPIO_WritePin(YELLOW_HOR_GPIO_Port, YELLOW_HOR_Pin, 1);
	}
}
 80001fc:	e028      	b.n	8000250 <changeState2+0x80>
	else if(HAL_GPIO_ReadPin(YELLOW_HOR_GPIO_Port, YELLOW_HOR_Pin) == 1) {
 80001fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000202:	4814      	ldr	r0, [pc, #80]	; (8000254 <changeState2+0x84>)
 8000204:	f001 fbc0 	bl	8001988 <HAL_GPIO_ReadPin>
 8000208:	4603      	mov	r3, r0
 800020a:	2b01      	cmp	r3, #1
 800020c:	d10c      	bne.n	8000228 <changeState2+0x58>
		HAL_GPIO_WritePin(YELLOW_HOR_GPIO_Port, YELLOW_HOR_Pin, 0);
 800020e:	2200      	movs	r2, #0
 8000210:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000214:	480f      	ldr	r0, [pc, #60]	; (8000254 <changeState2+0x84>)
 8000216:	f001 fbce 	bl	80019b6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED_HOR_GPIO_Port, RED_HOR_Pin, 1);
 800021a:	2201      	movs	r2, #1
 800021c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000220:	480c      	ldr	r0, [pc, #48]	; (8000254 <changeState2+0x84>)
 8000222:	f001 fbc8 	bl	80019b6 <HAL_GPIO_WritePin>
}
 8000226:	e013      	b.n	8000250 <changeState2+0x80>
	else if(HAL_GPIO_ReadPin(GREEN_HOR_GPIO_Port, GREEN_HOR_Pin) == 1){
 8000228:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800022c:	4809      	ldr	r0, [pc, #36]	; (8000254 <changeState2+0x84>)
 800022e:	f001 fbab 	bl	8001988 <HAL_GPIO_ReadPin>
 8000232:	4603      	mov	r3, r0
 8000234:	2b01      	cmp	r3, #1
 8000236:	d10b      	bne.n	8000250 <changeState2+0x80>
		HAL_GPIO_WritePin(GREEN_HOR_GPIO_Port, GREEN_HOR_Pin, 0);
 8000238:	2200      	movs	r2, #0
 800023a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800023e:	4805      	ldr	r0, [pc, #20]	; (8000254 <changeState2+0x84>)
 8000240:	f001 fbb9 	bl	80019b6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_HOR_GPIO_Port, YELLOW_HOR_Pin, 1);
 8000244:	2201      	movs	r2, #1
 8000246:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800024a:	4802      	ldr	r0, [pc, #8]	; (8000254 <changeState2+0x84>)
 800024c:	f001 fbb3 	bl	80019b6 <HAL_GPIO_WritePin>
}
 8000250:	bf00      	nop
 8000252:	bd80      	pop	{r7, pc}
 8000254:	40010800 	.word	0x40010800

08000258 <trafficlight>:

void trafficlight(int timered, int timeyellow, int timegreen)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b08a      	sub	sp, #40	; 0x28
 800025c:	af00      	add	r7, sp, #0
 800025e:	60f8      	str	r0, [r7, #12]
 8000260:	60b9      	str	r1, [r7, #8]
 8000262:	607a      	str	r2, [r7, #4]
	HAL_GPIO_WritePin(RED_GPIO_Port, RED_Pin, 1);
 8000264:	2201      	movs	r2, #1
 8000266:	2180      	movs	r1, #128	; 0x80
 8000268:	4871      	ldr	r0, [pc, #452]	; (8000430 <trafficlight+0x1d8>)
 800026a:	f001 fba4 	bl	80019b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_HOR_GPIO_Port, GREEN_HOR_Pin, 1);
 800026e:	2201      	movs	r2, #1
 8000270:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000274:	486e      	ldr	r0, [pc, #440]	; (8000430 <trafficlight+0x1d8>)
 8000276:	f001 fb9e 	bl	80019b6 <HAL_GPIO_WritePin>

	int time_first = timered;
 800027a:	68fb      	ldr	r3, [r7, #12]
 800027c:	627b      	str	r3, [r7, #36]	; 0x24
	int time_sec = timegreen;
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	623b      	str	r3, [r7, #32]

	while(time_sec != 0) {
 8000282:	e029      	b.n	80002d8 <trafficlight+0x80>

		int count = 0;
 8000284:	2300      	movs	r3, #0
 8000286:	61fb      	str	r3, [r7, #28]

		while(count < 8) {
 8000288:	e01d      	b.n	80002c6 <trafficlight+0x6e>

			updateLED(time_first, time_sec);
 800028a:	6a39      	ldr	r1, [r7, #32]
 800028c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800028e:	f000 fcc7 	bl	8000c20 <updateLED>

			if(is_button_pressed(0))
 8000292:	2000      	movs	r0, #0
 8000294:	f000 faa6 	bl	80007e4 <is_button_pressed>
 8000298:	4603      	mov	r3, r0
 800029a:	2b00      	cmp	r3, #0
 800029c:	d010      	beq.n	80002c0 <trafficlight+0x68>
			{
				if(call > 1)
 800029e:	4b65      	ldr	r3, [pc, #404]	; (8000434 <trafficlight+0x1dc>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	2b01      	cmp	r3, #1
 80002a4:	dd03      	ble.n	80002ae <trafficlight+0x56>
					themode = 0;
 80002a6:	4b64      	ldr	r3, [pc, #400]	; (8000438 <trafficlight+0x1e0>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	601a      	str	r2, [r3, #0]
 80002ac:	e005      	b.n	80002ba <trafficlight+0x62>
				else
				{
					themode = 1;
 80002ae:	4b62      	ldr	r3, [pc, #392]	; (8000438 <trafficlight+0x1e0>)
 80002b0:	2201      	movs	r2, #1
 80002b2:	601a      	str	r2, [r3, #0]
					call = 2;
 80002b4:	4b5f      	ldr	r3, [pc, #380]	; (8000434 <trafficlight+0x1dc>)
 80002b6:	2202      	movs	r2, #2
 80002b8:	601a      	str	r2, [r3, #0]
				}
				blink_LED_RED();
 80002ba:	f000 feb7 	bl	800102c <blink_LED_RED>
				return;
 80002be:	e0b4      	b.n	800042a <trafficlight+0x1d2>
			}
			count++;
 80002c0:	69fb      	ldr	r3, [r7, #28]
 80002c2:	3301      	adds	r3, #1
 80002c4:	61fb      	str	r3, [r7, #28]
		while(count < 8) {
 80002c6:	69fb      	ldr	r3, [r7, #28]
 80002c8:	2b07      	cmp	r3, #7
 80002ca:	ddde      	ble.n	800028a <trafficlight+0x32>
		}
		time_sec--;
 80002cc:	6a3b      	ldr	r3, [r7, #32]
 80002ce:	3b01      	subs	r3, #1
 80002d0:	623b      	str	r3, [r7, #32]
		time_first--;
 80002d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002d4:	3b01      	subs	r3, #1
 80002d6:	627b      	str	r3, [r7, #36]	; 0x24
	while(time_sec != 0) {
 80002d8:	6a3b      	ldr	r3, [r7, #32]
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d1d2      	bne.n	8000284 <trafficlight+0x2c>
	}
	changeState2();
 80002de:	f7ff ff77 	bl	80001d0 <changeState2>
	time_sec = timeyellow;
 80002e2:	68bb      	ldr	r3, [r7, #8]
 80002e4:	623b      	str	r3, [r7, #32]

	while(time_sec != 0) {
 80002e6:	e029      	b.n	800033c <trafficlight+0xe4>
		int count = 0;
 80002e8:	2300      	movs	r3, #0
 80002ea:	61bb      	str	r3, [r7, #24]

		while(count < 8) {
 80002ec:	e01d      	b.n	800032a <trafficlight+0xd2>
			updateLED(time_first, time_sec);
 80002ee:	6a39      	ldr	r1, [r7, #32]
 80002f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80002f2:	f000 fc95 	bl	8000c20 <updateLED>
			if(is_button_pressed(0))
 80002f6:	2000      	movs	r0, #0
 80002f8:	f000 fa74 	bl	80007e4 <is_button_pressed>
 80002fc:	4603      	mov	r3, r0
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d010      	beq.n	8000324 <trafficlight+0xcc>
			{
				if(call > 1)
 8000302:	4b4c      	ldr	r3, [pc, #304]	; (8000434 <trafficlight+0x1dc>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	2b01      	cmp	r3, #1
 8000308:	dd03      	ble.n	8000312 <trafficlight+0xba>
					themode = 0;
 800030a:	4b4b      	ldr	r3, [pc, #300]	; (8000438 <trafficlight+0x1e0>)
 800030c:	2200      	movs	r2, #0
 800030e:	601a      	str	r2, [r3, #0]
 8000310:	e005      	b.n	800031e <trafficlight+0xc6>
				else
				{
					themode = 1;
 8000312:	4b49      	ldr	r3, [pc, #292]	; (8000438 <trafficlight+0x1e0>)
 8000314:	2201      	movs	r2, #1
 8000316:	601a      	str	r2, [r3, #0]
					call = 2;
 8000318:	4b46      	ldr	r3, [pc, #280]	; (8000434 <trafficlight+0x1dc>)
 800031a:	2202      	movs	r2, #2
 800031c:	601a      	str	r2, [r3, #0]
				}
				blink_LED_RED();
 800031e:	f000 fe85 	bl	800102c <blink_LED_RED>
				return;
 8000322:	e082      	b.n	800042a <trafficlight+0x1d2>
			}
			count++;
 8000324:	69bb      	ldr	r3, [r7, #24]
 8000326:	3301      	adds	r3, #1
 8000328:	61bb      	str	r3, [r7, #24]
		while(count < 8) {
 800032a:	69bb      	ldr	r3, [r7, #24]
 800032c:	2b07      	cmp	r3, #7
 800032e:	ddde      	ble.n	80002ee <trafficlight+0x96>
		}
		time_sec--;
 8000330:	6a3b      	ldr	r3, [r7, #32]
 8000332:	3b01      	subs	r3, #1
 8000334:	623b      	str	r3, [r7, #32]
		time_first--;
 8000336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000338:	3b01      	subs	r3, #1
 800033a:	627b      	str	r3, [r7, #36]	; 0x24
	while(time_sec != 0) {
 800033c:	6a3b      	ldr	r3, [r7, #32]
 800033e:	2b00      	cmp	r3, #0
 8000340:	d1d2      	bne.n	80002e8 <trafficlight+0x90>
	}

	changeState2();
 8000342:	f7ff ff45 	bl	80001d0 <changeState2>
	changeState1();
 8000346:	f7ff ff01 	bl	800014c <changeState1>

	time_first = timegreen;
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	627b      	str	r3, [r7, #36]	; 0x24
	time_sec = timered;
 800034e:	68fb      	ldr	r3, [r7, #12]
 8000350:	623b      	str	r3, [r7, #32]

	while(time_first != 0) {
 8000352:	e029      	b.n	80003a8 <trafficlight+0x150>
		int count = 0;
 8000354:	2300      	movs	r3, #0
 8000356:	617b      	str	r3, [r7, #20]

		while(count < 8) {
 8000358:	e01d      	b.n	8000396 <trafficlight+0x13e>
			updateLED(time_first, time_sec);
 800035a:	6a39      	ldr	r1, [r7, #32]
 800035c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800035e:	f000 fc5f 	bl	8000c20 <updateLED>
			if(is_button_pressed(0))
 8000362:	2000      	movs	r0, #0
 8000364:	f000 fa3e 	bl	80007e4 <is_button_pressed>
 8000368:	4603      	mov	r3, r0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d010      	beq.n	8000390 <trafficlight+0x138>
			{
				if(call > 1)
 800036e:	4b31      	ldr	r3, [pc, #196]	; (8000434 <trafficlight+0x1dc>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	2b01      	cmp	r3, #1
 8000374:	dd03      	ble.n	800037e <trafficlight+0x126>
					themode = 0;
 8000376:	4b30      	ldr	r3, [pc, #192]	; (8000438 <trafficlight+0x1e0>)
 8000378:	2200      	movs	r2, #0
 800037a:	601a      	str	r2, [r3, #0]
 800037c:	e005      	b.n	800038a <trafficlight+0x132>
				else
				{
					themode = 1;
 800037e:	4b2e      	ldr	r3, [pc, #184]	; (8000438 <trafficlight+0x1e0>)
 8000380:	2201      	movs	r2, #1
 8000382:	601a      	str	r2, [r3, #0]
					call = 2;
 8000384:	4b2b      	ldr	r3, [pc, #172]	; (8000434 <trafficlight+0x1dc>)
 8000386:	2202      	movs	r2, #2
 8000388:	601a      	str	r2, [r3, #0]
				}
				blink_LED_RED();
 800038a:	f000 fe4f 	bl	800102c <blink_LED_RED>
				return;
 800038e:	e04c      	b.n	800042a <trafficlight+0x1d2>
			}
			count++;
 8000390:	697b      	ldr	r3, [r7, #20]
 8000392:	3301      	adds	r3, #1
 8000394:	617b      	str	r3, [r7, #20]
		while(count < 8) {
 8000396:	697b      	ldr	r3, [r7, #20]
 8000398:	2b07      	cmp	r3, #7
 800039a:	ddde      	ble.n	800035a <trafficlight+0x102>
		}
		time_sec--;
 800039c:	6a3b      	ldr	r3, [r7, #32]
 800039e:	3b01      	subs	r3, #1
 80003a0:	623b      	str	r3, [r7, #32]
		time_first--;
 80003a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003a4:	3b01      	subs	r3, #1
 80003a6:	627b      	str	r3, [r7, #36]	; 0x24
	while(time_first != 0) {
 80003a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d1d2      	bne.n	8000354 <trafficlight+0xfc>
	}

	changeState1();
 80003ae:	f7ff fecd 	bl	800014c <changeState1>
	time_first = timeyellow;
 80003b2:	68bb      	ldr	r3, [r7, #8]
 80003b4:	627b      	str	r3, [r7, #36]	; 0x24

	while(time_first != 0) {
 80003b6:	e029      	b.n	800040c <trafficlight+0x1b4>
		int count = 0;
 80003b8:	2300      	movs	r3, #0
 80003ba:	613b      	str	r3, [r7, #16]

		while(count < 8) {
 80003bc:	e01d      	b.n	80003fa <trafficlight+0x1a2>
			updateLED(time_first, time_sec);
 80003be:	6a39      	ldr	r1, [r7, #32]
 80003c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80003c2:	f000 fc2d 	bl	8000c20 <updateLED>
			if(is_button_pressed(0))
 80003c6:	2000      	movs	r0, #0
 80003c8:	f000 fa0c 	bl	80007e4 <is_button_pressed>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d010      	beq.n	80003f4 <trafficlight+0x19c>
			{
				if(call > 1)
 80003d2:	4b18      	ldr	r3, [pc, #96]	; (8000434 <trafficlight+0x1dc>)
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	2b01      	cmp	r3, #1
 80003d8:	dd03      	ble.n	80003e2 <trafficlight+0x18a>
					themode = 0;
 80003da:	4b17      	ldr	r3, [pc, #92]	; (8000438 <trafficlight+0x1e0>)
 80003dc:	2200      	movs	r2, #0
 80003de:	601a      	str	r2, [r3, #0]
 80003e0:	e005      	b.n	80003ee <trafficlight+0x196>
				else
				{
					themode = 1;
 80003e2:	4b15      	ldr	r3, [pc, #84]	; (8000438 <trafficlight+0x1e0>)
 80003e4:	2201      	movs	r2, #1
 80003e6:	601a      	str	r2, [r3, #0]
					call = 2;
 80003e8:	4b12      	ldr	r3, [pc, #72]	; (8000434 <trafficlight+0x1dc>)
 80003ea:	2202      	movs	r2, #2
 80003ec:	601a      	str	r2, [r3, #0]
				}
				blink_LED_RED();
 80003ee:	f000 fe1d 	bl	800102c <blink_LED_RED>
				return;
 80003f2:	e01a      	b.n	800042a <trafficlight+0x1d2>
			}
			count++;
 80003f4:	693b      	ldr	r3, [r7, #16]
 80003f6:	3301      	adds	r3, #1
 80003f8:	613b      	str	r3, [r7, #16]
		while(count < 8) {
 80003fa:	693b      	ldr	r3, [r7, #16]
 80003fc:	2b07      	cmp	r3, #7
 80003fe:	ddde      	ble.n	80003be <trafficlight+0x166>
		}
		time_sec--;
 8000400:	6a3b      	ldr	r3, [r7, #32]
 8000402:	3b01      	subs	r3, #1
 8000404:	623b      	str	r3, [r7, #32]
		time_first--;
 8000406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000408:	3b01      	subs	r3, #1
 800040a:	627b      	str	r3, [r7, #36]	; 0x24
	while(time_first != 0) {
 800040c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800040e:	2b00      	cmp	r3, #0
 8000410:	d1d2      	bne.n	80003b8 <trafficlight+0x160>
	}

	HAL_GPIO_WritePin(YELLOW_GPIO_Port, YELLOW_Pin, 0);
 8000412:	2200      	movs	r2, #0
 8000414:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000418:	4805      	ldr	r0, [pc, #20]	; (8000430 <trafficlight+0x1d8>)
 800041a:	f001 facc 	bl	80019b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RED_HOR_GPIO_Port, RED_HOR_Pin, 0);
 800041e:	2200      	movs	r2, #0
 8000420:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000424:	4802      	ldr	r0, [pc, #8]	; (8000430 <trafficlight+0x1d8>)
 8000426:	f001 fac6 	bl	80019b6 <HAL_GPIO_WritePin>
}
 800042a:	3728      	adds	r7, #40	; 0x28
 800042c:	46bd      	mov	sp, r7
 800042e:	bd80      	pop	{r7, pc}
 8000430:	40010800 	.word	0x40010800
 8000434:	20000014 	.word	0x20000014
 8000438:	20000000 	.word	0x20000000

0800043c <fsm_for_input_processing_2>:

void fsm_for_input_processing_2(void) {
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0
	switch ( buttonState_2 ){
 8000440:	4b22      	ldr	r3, [pc, #136]	; (80004cc <fsm_for_input_processing_2+0x90>)
 8000442:	781b      	ldrb	r3, [r3, #0]
 8000444:	2b02      	cmp	r3, #2
 8000446:	d029      	beq.n	800049c <fsm_for_input_processing_2+0x60>
 8000448:	2b02      	cmp	r3, #2
 800044a:	dc3c      	bgt.n	80004c6 <fsm_for_input_processing_2+0x8a>
 800044c:	2b00      	cmp	r3, #0
 800044e:	d002      	beq.n	8000456 <fsm_for_input_processing_2+0x1a>
 8000450:	2b01      	cmp	r3, #1
 8000452:	d00f      	beq.n	8000474 <fsm_for_input_processing_2+0x38>
		// todo
		time1++;
		HAL_Delay(50);
		break;
	}
}
 8000454:	e037      	b.n	80004c6 <fsm_for_input_processing_2+0x8a>
		if(is_button_pressed_2(0)) {
 8000456:	2000      	movs	r0, #0
 8000458:	f000 fa56 	bl	8000908 <is_button_pressed_2>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d02e      	beq.n	80004c0 <fsm_for_input_processing_2+0x84>
			buttonState_2 = BUTTON_PRESSED;
 8000462:	4b1a      	ldr	r3, [pc, #104]	; (80004cc <fsm_for_input_processing_2+0x90>)
 8000464:	2201      	movs	r2, #1
 8000466:	701a      	strb	r2, [r3, #0]
			time1++;
 8000468:	4b19      	ldr	r3, [pc, #100]	; (80004d0 <fsm_for_input_processing_2+0x94>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	3301      	adds	r3, #1
 800046e:	4a18      	ldr	r2, [pc, #96]	; (80004d0 <fsm_for_input_processing_2+0x94>)
 8000470:	6013      	str	r3, [r2, #0]
		break;
 8000472:	e025      	b.n	80004c0 <fsm_for_input_processing_2+0x84>
		if (!is_button_pressed_2(0)) {
 8000474:	2000      	movs	r0, #0
 8000476:	f000 fa47 	bl	8000908 <is_button_pressed_2>
 800047a:	4603      	mov	r3, r0
 800047c:	2b00      	cmp	r3, #0
 800047e:	d103      	bne.n	8000488 <fsm_for_input_processing_2+0x4c>
			buttonState_2 = BUTTON_RELEASED;
 8000480:	4b12      	ldr	r3, [pc, #72]	; (80004cc <fsm_for_input_processing_2+0x90>)
 8000482:	2200      	movs	r2, #0
 8000484:	701a      	strb	r2, [r3, #0]
		break ;
 8000486:	e01d      	b.n	80004c4 <fsm_for_input_processing_2+0x88>
			if( is_button_pressed_1s_2(0)) {
 8000488:	2000      	movs	r0, #0
 800048a:	f000 fa57 	bl	800093c <is_button_pressed_1s_2>
 800048e:	4603      	mov	r3, r0
 8000490:	2b00      	cmp	r3, #0
 8000492:	d017      	beq.n	80004c4 <fsm_for_input_processing_2+0x88>
				buttonState_2 = BUTTON_PRESSED_MORE_THAN_1_SECOND ;
 8000494:	4b0d      	ldr	r3, [pc, #52]	; (80004cc <fsm_for_input_processing_2+0x90>)
 8000496:	2202      	movs	r2, #2
 8000498:	701a      	strb	r2, [r3, #0]
		break ;
 800049a:	e013      	b.n	80004c4 <fsm_for_input_processing_2+0x88>
		if (!is_button_pressed_2(0)) {
 800049c:	2000      	movs	r0, #0
 800049e:	f000 fa33 	bl	8000908 <is_button_pressed_2>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d102      	bne.n	80004ae <fsm_for_input_processing_2+0x72>
			buttonState_2 = BUTTON_RELEASED ;
 80004a8:	4b08      	ldr	r3, [pc, #32]	; (80004cc <fsm_for_input_processing_2+0x90>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	701a      	strb	r2, [r3, #0]
		time1++;
 80004ae:	4b08      	ldr	r3, [pc, #32]	; (80004d0 <fsm_for_input_processing_2+0x94>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	3301      	adds	r3, #1
 80004b4:	4a06      	ldr	r2, [pc, #24]	; (80004d0 <fsm_for_input_processing_2+0x94>)
 80004b6:	6013      	str	r3, [r2, #0]
		HAL_Delay(50);
 80004b8:	2032      	movs	r0, #50	; 0x32
 80004ba:	f000 ffb9 	bl	8001430 <HAL_Delay>
		break;
 80004be:	e002      	b.n	80004c6 <fsm_for_input_processing_2+0x8a>
		break;
 80004c0:	bf00      	nop
 80004c2:	e000      	b.n	80004c6 <fsm_for_input_processing_2+0x8a>
		break ;
 80004c4:	bf00      	nop
}
 80004c6:	bf00      	nop
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	20000051 	.word	0x20000051
 80004d0:	20000054 	.word	0x20000054

080004d4 <fsm_for_input_processing_3>:

void fsm_for_input_processing_3(void) {
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0

	switch ( buttonState_3 ){
 80004d8:	4b22      	ldr	r3, [pc, #136]	; (8000564 <fsm_for_input_processing_3+0x90>)
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	2b02      	cmp	r3, #2
 80004de:	d032      	beq.n	8000546 <fsm_for_input_processing_3+0x72>
 80004e0:	2b02      	cmp	r3, #2
 80004e2:	dc3d      	bgt.n	8000560 <fsm_for_input_processing_3+0x8c>
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d002      	beq.n	80004ee <fsm_for_input_processing_3+0x1a>
 80004e8:	2b01      	cmp	r3, #1
 80004ea:	d018      	beq.n	800051e <fsm_for_input_processing_3+0x4a>
 80004ec:	e038      	b.n	8000560 <fsm_for_input_processing_3+0x8c>

	case BUTTON_RELEASED:
		if(is_button_pressed_3(0)) {
 80004ee:	2000      	movs	r0, #0
 80004f0:	f000 fa9c 	bl	8000a2c <is_button_pressed_3>
 80004f4:	4603      	mov	r3, r0
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d006      	beq.n	8000508 <fsm_for_input_processing_3+0x34>
			buttonState_3 = BUTTON_PRESSED;
 80004fa:	4b1a      	ldr	r3, [pc, #104]	; (8000564 <fsm_for_input_processing_3+0x90>)
 80004fc:	2201      	movs	r2, #1
 80004fe:	701a      	strb	r2, [r3, #0]
			// INCREASE VALUE OF PORT A BY ONE UNIT
			able = 0;
 8000500:	4b19      	ldr	r3, [pc, #100]	; (8000568 <fsm_for_input_processing_3+0x94>)
 8000502:	2200      	movs	r2, #0
 8000504:	601a      	str	r2, [r3, #0]
			return;
 8000506:	e02b      	b.n	8000560 <fsm_for_input_processing_3+0x8c>
		}
		fsm_for_input_processing_2();
 8000508:	f7ff ff98 	bl	800043c <fsm_for_input_processing_2>
		updateLED(time1,themode);
 800050c:	4b17      	ldr	r3, [pc, #92]	; (800056c <fsm_for_input_processing_3+0x98>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4a17      	ldr	r2, [pc, #92]	; (8000570 <fsm_for_input_processing_3+0x9c>)
 8000512:	6812      	ldr	r2, [r2, #0]
 8000514:	4611      	mov	r1, r2
 8000516:	4618      	mov	r0, r3
 8000518:	f000 fb82 	bl	8000c20 <updateLED>
		break;
 800051c:	e020      	b.n	8000560 <fsm_for_input_processing_3+0x8c>
	case BUTTON_PRESSED:
		if (!is_button_pressed_3(0)) {
 800051e:	2000      	movs	r0, #0
 8000520:	f000 fa84 	bl	8000a2c <is_button_pressed_3>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d103      	bne.n	8000532 <fsm_for_input_processing_3+0x5e>
			buttonState_3 = BUTTON_RELEASED;
 800052a:	4b0e      	ldr	r3, [pc, #56]	; (8000564 <fsm_for_input_processing_3+0x90>)
 800052c:	2200      	movs	r2, #0
 800052e:	701a      	strb	r2, [r3, #0]
		} else {
			if( is_button_pressed_1s_3(0)) {
				buttonState_3 = BUTTON_PRESSED_MORE_THAN_1_SECOND ;
			}
		}
		break ;
 8000530:	e013      	b.n	800055a <fsm_for_input_processing_3+0x86>
			if( is_button_pressed_1s_3(0)) {
 8000532:	2000      	movs	r0, #0
 8000534:	f000 fa94 	bl	8000a60 <is_button_pressed_1s_3>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d00d      	beq.n	800055a <fsm_for_input_processing_3+0x86>
				buttonState_3 = BUTTON_PRESSED_MORE_THAN_1_SECOND ;
 800053e:	4b09      	ldr	r3, [pc, #36]	; (8000564 <fsm_for_input_processing_3+0x90>)
 8000540:	2202      	movs	r2, #2
 8000542:	701a      	strb	r2, [r3, #0]
		break ;
 8000544:	e009      	b.n	800055a <fsm_for_input_processing_3+0x86>
	case BUTTON_PRESSED_MORE_THAN_1_SECOND :
		if (!is_button_pressed_3(0)) {
 8000546:	2000      	movs	r0, #0
 8000548:	f000 fa70 	bl	8000a2c <is_button_pressed_3>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d105      	bne.n	800055e <fsm_for_input_processing_3+0x8a>
			buttonState_3 = BUTTON_RELEASED ;
 8000552:	4b04      	ldr	r3, [pc, #16]	; (8000564 <fsm_for_input_processing_3+0x90>)
 8000554:	2200      	movs	r2, #0
 8000556:	701a      	strb	r2, [r3, #0]
		}
		// todo
		break ;
 8000558:	e001      	b.n	800055e <fsm_for_input_processing_3+0x8a>
		break ;
 800055a:	bf00      	nop
 800055c:	e000      	b.n	8000560 <fsm_for_input_processing_3+0x8c>
		break ;
 800055e:	bf00      	nop
	}
}
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	20000052 	.word	0x20000052
 8000568:	20000010 	.word	0x20000010
 800056c:	20000054 	.word	0x20000054
 8000570:	20000000 	.word	0x20000000

08000574 <fsm_for_input_processing>:

void fsm_for_input_processing(void) {
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0

	switch ( buttonState ){
 8000578:	4b64      	ldr	r3, [pc, #400]	; (800070c <fsm_for_input_processing+0x198>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	2b02      	cmp	r3, #2
 800057e:	f000 80b4 	beq.w	80006ea <fsm_for_input_processing+0x176>
 8000582:	2b02      	cmp	r3, #2
 8000584:	f300 80c0 	bgt.w	8000708 <fsm_for_input_processing+0x194>
 8000588:	2b00      	cmp	r3, #0
 800058a:	d003      	beq.n	8000594 <fsm_for_input_processing+0x20>
 800058c:	2b01      	cmp	r3, #1
 800058e:	f000 8098 	beq.w	80006c2 <fsm_for_input_processing+0x14e>
			buttonState = BUTTON_RELEASED ;
		}
		// todo
		break ;
	}
}
 8000592:	e0b9      	b.n	8000708 <fsm_for_input_processing+0x194>
		if(is_button_pressed(0)) {
 8000594:	2000      	movs	r0, #0
 8000596:	f000 f925 	bl	80007e4 <is_button_pressed>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d029      	beq.n	80005f4 <fsm_for_input_processing+0x80>
			buttonState = BUTTON_PRESSED;
 80005a0:	4b5a      	ldr	r3, [pc, #360]	; (800070c <fsm_for_input_processing+0x198>)
 80005a2:	2201      	movs	r2, #1
 80005a4:	701a      	strb	r2, [r3, #0]
			themode++;
 80005a6:	4b5a      	ldr	r3, [pc, #360]	; (8000710 <fsm_for_input_processing+0x19c>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	3301      	adds	r3, #1
 80005ac:	4a58      	ldr	r2, [pc, #352]	; (8000710 <fsm_for_input_processing+0x19c>)
 80005ae:	6013      	str	r3, [r2, #0]
			if(themode == 4)
 80005b0:	4b57      	ldr	r3, [pc, #348]	; (8000710 <fsm_for_input_processing+0x19c>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	2b04      	cmp	r3, #4
 80005b6:	d102      	bne.n	80005be <fsm_for_input_processing+0x4a>
				themode = 0;
 80005b8:	4b55      	ldr	r3, [pc, #340]	; (8000710 <fsm_for_input_processing+0x19c>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
			if(themode == 1) {
 80005be:	4b54      	ldr	r3, [pc, #336]	; (8000710 <fsm_for_input_processing+0x19c>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	2b01      	cmp	r3, #1
 80005c4:	d102      	bne.n	80005cc <fsm_for_input_processing+0x58>
				blink_LED_RED();
 80005c6:	f000 fd31 	bl	800102c <blink_LED_RED>
 80005ca:	e013      	b.n	80005f4 <fsm_for_input_processing+0x80>
			else if(themode == 2) {
 80005cc:	4b50      	ldr	r3, [pc, #320]	; (8000710 <fsm_for_input_processing+0x19c>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	2b02      	cmp	r3, #2
 80005d2:	d104      	bne.n	80005de <fsm_for_input_processing+0x6a>
				turn_off_blink_LED_RED();
 80005d4:	f000 fd62 	bl	800109c <turn_off_blink_LED_RED>
				blink_LED_YELLOW();
 80005d8:	f000 fd7c 	bl	80010d4 <blink_LED_YELLOW>
 80005dc:	e00a      	b.n	80005f4 <fsm_for_input_processing+0x80>
			else if(themode == 3) {
 80005de:	4b4c      	ldr	r3, [pc, #304]	; (8000710 <fsm_for_input_processing+0x19c>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	2b03      	cmp	r3, #3
 80005e4:	d104      	bne.n	80005f0 <fsm_for_input_processing+0x7c>
				turn_off_blink_LED_YELLOW();
 80005e6:	f000 fdad 	bl	8001144 <turn_off_blink_LED_YELLOW>
				blink_LED_GREEN();
 80005ea:	f000 fdc7 	bl	800117c <blink_LED_GREEN>
 80005ee:	e001      	b.n	80005f4 <fsm_for_input_processing+0x80>
				turn_off_blink_LED_GREEN();
 80005f0:	f000 fdfc 	bl	80011ec <turn_off_blink_LED_GREEN>
		if(themode == 0) {
 80005f4:	4b46      	ldr	r3, [pc, #280]	; (8000710 <fsm_for_input_processing+0x19c>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d109      	bne.n	8000610 <fsm_for_input_processing+0x9c>
			trafficlight(time_red, time_yellow, time_green);
 80005fc:	4b45      	ldr	r3, [pc, #276]	; (8000714 <fsm_for_input_processing+0x1a0>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a45      	ldr	r2, [pc, #276]	; (8000718 <fsm_for_input_processing+0x1a4>)
 8000602:	6811      	ldr	r1, [r2, #0]
 8000604:	4a45      	ldr	r2, [pc, #276]	; (800071c <fsm_for_input_processing+0x1a8>)
 8000606:	6812      	ldr	r2, [r2, #0]
 8000608:	4618      	mov	r0, r3
 800060a:	f7ff fe25 	bl	8000258 <trafficlight>
		break;
 800060e:	e076      	b.n	80006fe <fsm_for_input_processing+0x18a>
		else if(themode == 1) {
 8000610:	4b3f      	ldr	r3, [pc, #252]	; (8000710 <fsm_for_input_processing+0x19c>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	2b01      	cmp	r3, #1
 8000616:	d11a      	bne.n	800064e <fsm_for_input_processing+0xda>
			able = 1;
 8000618:	4b41      	ldr	r3, [pc, #260]	; (8000720 <fsm_for_input_processing+0x1ac>)
 800061a:	2201      	movs	r2, #1
 800061c:	601a      	str	r2, [r3, #0]
			while(able == 1) {
 800061e:	e001      	b.n	8000624 <fsm_for_input_processing+0xb0>
				fsm_for_input_processing_3();
 8000620:	f7ff ff58 	bl	80004d4 <fsm_for_input_processing_3>
			while(able == 1) {
 8000624:	4b3e      	ldr	r3, [pc, #248]	; (8000720 <fsm_for_input_processing+0x1ac>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	2b01      	cmp	r3, #1
 800062a:	d0f9      	beq.n	8000620 <fsm_for_input_processing+0xac>
			time_red = time1;
 800062c:	4b3d      	ldr	r3, [pc, #244]	; (8000724 <fsm_for_input_processing+0x1b0>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a38      	ldr	r2, [pc, #224]	; (8000714 <fsm_for_input_processing+0x1a0>)
 8000632:	6013      	str	r3, [r2, #0]
			time1 = 0;
 8000634:	4b3b      	ldr	r3, [pc, #236]	; (8000724 <fsm_for_input_processing+0x1b0>)
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
			themode++;
 800063a:	4b35      	ldr	r3, [pc, #212]	; (8000710 <fsm_for_input_processing+0x19c>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	3301      	adds	r3, #1
 8000640:	4a33      	ldr	r2, [pc, #204]	; (8000710 <fsm_for_input_processing+0x19c>)
 8000642:	6013      	str	r3, [r2, #0]
			turn_off_blink_LED_RED();
 8000644:	f000 fd2a 	bl	800109c <turn_off_blink_LED_RED>
			blink_LED_YELLOW();
 8000648:	f000 fd44 	bl	80010d4 <blink_LED_YELLOW>
		break;
 800064c:	e057      	b.n	80006fe <fsm_for_input_processing+0x18a>
		else if(themode == 2) {
 800064e:	4b30      	ldr	r3, [pc, #192]	; (8000710 <fsm_for_input_processing+0x19c>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	2b02      	cmp	r3, #2
 8000654:	d11a      	bne.n	800068c <fsm_for_input_processing+0x118>
			able = 1;
 8000656:	4b32      	ldr	r3, [pc, #200]	; (8000720 <fsm_for_input_processing+0x1ac>)
 8000658:	2201      	movs	r2, #1
 800065a:	601a      	str	r2, [r3, #0]
			while(able == 1) {
 800065c:	e001      	b.n	8000662 <fsm_for_input_processing+0xee>
				fsm_for_input_processing_3();
 800065e:	f7ff ff39 	bl	80004d4 <fsm_for_input_processing_3>
			while(able == 1) {
 8000662:	4b2f      	ldr	r3, [pc, #188]	; (8000720 <fsm_for_input_processing+0x1ac>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	2b01      	cmp	r3, #1
 8000668:	d0f9      	beq.n	800065e <fsm_for_input_processing+0xea>
			time_yellow = time1;
 800066a:	4b2e      	ldr	r3, [pc, #184]	; (8000724 <fsm_for_input_processing+0x1b0>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	4a2a      	ldr	r2, [pc, #168]	; (8000718 <fsm_for_input_processing+0x1a4>)
 8000670:	6013      	str	r3, [r2, #0]
			time1 = 0;
 8000672:	4b2c      	ldr	r3, [pc, #176]	; (8000724 <fsm_for_input_processing+0x1b0>)
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
			themode++;
 8000678:	4b25      	ldr	r3, [pc, #148]	; (8000710 <fsm_for_input_processing+0x19c>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	3301      	adds	r3, #1
 800067e:	4a24      	ldr	r2, [pc, #144]	; (8000710 <fsm_for_input_processing+0x19c>)
 8000680:	6013      	str	r3, [r2, #0]
			turn_off_blink_LED_YELLOW();
 8000682:	f000 fd5f 	bl	8001144 <turn_off_blink_LED_YELLOW>
			blink_LED_GREEN();
 8000686:	f000 fd79 	bl	800117c <blink_LED_GREEN>
		break;
 800068a:	e038      	b.n	80006fe <fsm_for_input_processing+0x18a>
		else if(themode == 3) {
 800068c:	4b20      	ldr	r3, [pc, #128]	; (8000710 <fsm_for_input_processing+0x19c>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	2b03      	cmp	r3, #3
 8000692:	d134      	bne.n	80006fe <fsm_for_input_processing+0x18a>
			able = 1;
 8000694:	4b22      	ldr	r3, [pc, #136]	; (8000720 <fsm_for_input_processing+0x1ac>)
 8000696:	2201      	movs	r2, #1
 8000698:	601a      	str	r2, [r3, #0]
			while(able == 1) {
 800069a:	e001      	b.n	80006a0 <fsm_for_input_processing+0x12c>
				fsm_for_input_processing_3();
 800069c:	f7ff ff1a 	bl	80004d4 <fsm_for_input_processing_3>
			while(able == 1) {
 80006a0:	4b1f      	ldr	r3, [pc, #124]	; (8000720 <fsm_for_input_processing+0x1ac>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	2b01      	cmp	r3, #1
 80006a6:	d0f9      	beq.n	800069c <fsm_for_input_processing+0x128>
			time_green = time1;
 80006a8:	4b1e      	ldr	r3, [pc, #120]	; (8000724 <fsm_for_input_processing+0x1b0>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a1b      	ldr	r2, [pc, #108]	; (800071c <fsm_for_input_processing+0x1a8>)
 80006ae:	6013      	str	r3, [r2, #0]
			time1 = 0;
 80006b0:	4b1c      	ldr	r3, [pc, #112]	; (8000724 <fsm_for_input_processing+0x1b0>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	601a      	str	r2, [r3, #0]
			themode = 0;
 80006b6:	4b16      	ldr	r3, [pc, #88]	; (8000710 <fsm_for_input_processing+0x19c>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
			turn_off_blink_LED_GREEN();
 80006bc:	f000 fd96 	bl	80011ec <turn_off_blink_LED_GREEN>
		break;
 80006c0:	e01d      	b.n	80006fe <fsm_for_input_processing+0x18a>
		if (!is_button_pressed(0)) {
 80006c2:	2000      	movs	r0, #0
 80006c4:	f000 f88e 	bl	80007e4 <is_button_pressed>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d103      	bne.n	80006d6 <fsm_for_input_processing+0x162>
			buttonState = BUTTON_RELEASED;
 80006ce:	4b0f      	ldr	r3, [pc, #60]	; (800070c <fsm_for_input_processing+0x198>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	701a      	strb	r2, [r3, #0]
		break ;
 80006d4:	e015      	b.n	8000702 <fsm_for_input_processing+0x18e>
			if( is_button_pressed_1s(0)) {
 80006d6:	2000      	movs	r0, #0
 80006d8:	f000 f89e 	bl	8000818 <is_button_pressed_1s>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d00f      	beq.n	8000702 <fsm_for_input_processing+0x18e>
				buttonState = BUTTON_PRESSED_MORE_THAN_1_SECOND ;
 80006e2:	4b0a      	ldr	r3, [pc, #40]	; (800070c <fsm_for_input_processing+0x198>)
 80006e4:	2202      	movs	r2, #2
 80006e6:	701a      	strb	r2, [r3, #0]
		break ;
 80006e8:	e00b      	b.n	8000702 <fsm_for_input_processing+0x18e>
		if (!is_button_pressed(0)) {
 80006ea:	2000      	movs	r0, #0
 80006ec:	f000 f87a 	bl	80007e4 <is_button_pressed>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d107      	bne.n	8000706 <fsm_for_input_processing+0x192>
			buttonState = BUTTON_RELEASED ;
 80006f6:	4b05      	ldr	r3, [pc, #20]	; (800070c <fsm_for_input_processing+0x198>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	701a      	strb	r2, [r3, #0]
		break ;
 80006fc:	e003      	b.n	8000706 <fsm_for_input_processing+0x192>
		break;
 80006fe:	bf00      	nop
 8000700:	e002      	b.n	8000708 <fsm_for_input_processing+0x194>
		break ;
 8000702:	bf00      	nop
 8000704:	e000      	b.n	8000708 <fsm_for_input_processing+0x194>
		break ;
 8000706:	bf00      	nop
}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}
 800070c:	20000050 	.word	0x20000050
 8000710:	20000000 	.word	0x20000000
 8000714:	20000004 	.word	0x20000004
 8000718:	20000008 	.word	0x20000008
 800071c:	2000000c 	.word	0x2000000c
 8000720:	20000010 	.word	0x20000010
 8000724:	20000054 	.word	0x20000054

08000728 <button_reading>:
// after the button is pressed more than 1 second .
static uint16_t counterForButtonPress1s[ N0_OF_BUTTONS ];
static uint16_t counterForButtonPress1s_2[ N0_OF_BUTTONS ];
static uint16_t counterForButtonPress1s_3[ N0_OF_BUTTONS ];

void button_reading(void) {
 8000728:	b590      	push	{r4, r7, lr}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0

	for (char i = 0; i < N0_OF_BUTTONS; i ++) {
 800072e:	2300      	movs	r3, #0
 8000730:	71fb      	strb	r3, [r7, #7]
 8000732:	e042      	b.n	80007ba <button_reading+0x92>

		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000734:	79fa      	ldrb	r2, [r7, #7]
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	4924      	ldr	r1, [pc, #144]	; (80007cc <button_reading+0xa4>)
 800073a:	5c89      	ldrb	r1, [r1, r2]
 800073c:	4a24      	ldr	r2, [pc, #144]	; (80007d0 <button_reading+0xa8>)
 800073e:	54d1      	strb	r1, [r2, r3]

		debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port,BUTTON_1_Pin);
 8000740:	79fc      	ldrb	r4, [r7, #7]
 8000742:	2101      	movs	r1, #1
 8000744:	4823      	ldr	r0, [pc, #140]	; (80007d4 <button_reading+0xac>)
 8000746:	f001 f91f 	bl	8001988 <HAL_GPIO_ReadPin>
 800074a:	4603      	mov	r3, r0
 800074c:	461a      	mov	r2, r3
 800074e:	4b1f      	ldr	r3, [pc, #124]	; (80007cc <button_reading+0xa4>)
 8000750:	551a      	strb	r2, [r3, r4]

		if(debounceButtonBuffer1[i] == debounceButtonBuffer2[i])
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	4a1d      	ldr	r2, [pc, #116]	; (80007cc <button_reading+0xa4>)
 8000756:	5cd2      	ldrb	r2, [r2, r3]
 8000758:	79fb      	ldrb	r3, [r7, #7]
 800075a:	491d      	ldr	r1, [pc, #116]	; (80007d0 <button_reading+0xa8>)
 800075c:	5ccb      	ldrb	r3, [r1, r3]
 800075e:	429a      	cmp	r2, r3
 8000760:	d105      	bne.n	800076e <button_reading+0x46>
			buttonBuffer[i] = debounceButtonBuffer1[i];
 8000762:	79fa      	ldrb	r2, [r7, #7]
 8000764:	79fb      	ldrb	r3, [r7, #7]
 8000766:	4919      	ldr	r1, [pc, #100]	; (80007cc <button_reading+0xa4>)
 8000768:	5c89      	ldrb	r1, [r1, r2]
 800076a:	4a1b      	ldr	r2, [pc, #108]	; (80007d8 <button_reading+0xb0>)
 800076c:	54d1      	strb	r1, [r2, r3]

		if( buttonBuffer[i] == BUTTON_IS_PRESSED ) {
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	4a19      	ldr	r2, [pc, #100]	; (80007d8 <button_reading+0xb0>)
 8000772:	5cd3      	ldrb	r3, [r2, r3]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d114      	bne.n	80007a2 <button_reading+0x7a>
			// if a button is pressed , we start counting

			if( counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING ) {
 8000778:	79fb      	ldrb	r3, [r7, #7]
 800077a:	4a18      	ldr	r2, [pc, #96]	; (80007dc <button_reading+0xb4>)
 800077c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000780:	2b09      	cmp	r3, #9
 8000782:	d809      	bhi.n	8000798 <button_reading+0x70>
				counterForButtonPress1s[i]++;
 8000784:	79fb      	ldrb	r3, [r7, #7]
 8000786:	4a15      	ldr	r2, [pc, #84]	; (80007dc <button_reading+0xb4>)
 8000788:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800078c:	3201      	adds	r2, #1
 800078e:	b291      	uxth	r1, r2
 8000790:	4a12      	ldr	r2, [pc, #72]	; (80007dc <button_reading+0xb4>)
 8000792:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000796:	e00d      	b.n	80007b4 <button_reading+0x8c>
			}
			else {
				// the flag is turned on when 1 second has passed
				// since the button is pressed.
				flagForButtonPress1s[i] = 1;
 8000798:	79fb      	ldrb	r3, [r7, #7]
 800079a:	4a11      	ldr	r2, [pc, #68]	; (80007e0 <button_reading+0xb8>)
 800079c:	2101      	movs	r1, #1
 800079e:	54d1      	strb	r1, [r2, r3]
 80007a0:	e008      	b.n	80007b4 <button_reading+0x8c>
				// todo
			}
		}
		else {
			counterForButtonPress1s[i] = 0;
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	4a0d      	ldr	r2, [pc, #52]	; (80007dc <button_reading+0xb4>)
 80007a6:	2100      	movs	r1, #0
 80007a8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			flagForButtonPress1s[i] = 0;
 80007ac:	79fb      	ldrb	r3, [r7, #7]
 80007ae:	4a0c      	ldr	r2, [pc, #48]	; (80007e0 <button_reading+0xb8>)
 80007b0:	2100      	movs	r1, #0
 80007b2:	54d1      	strb	r1, [r2, r3]
	for (char i = 0; i < N0_OF_BUTTONS; i ++) {
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	3301      	adds	r3, #1
 80007b8:	71fb      	strb	r3, [r7, #7]
 80007ba:	79fb      	ldrb	r3, [r7, #7]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d0b9      	beq.n	8000734 <button_reading+0xc>
		}
	}
}
 80007c0:	bf00      	nop
 80007c2:	bf00      	nop
 80007c4:	370c      	adds	r7, #12
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd90      	pop	{r4, r7, pc}
 80007ca:	bf00      	nop
 80007cc:	20000064 	.word	0x20000064
 80007d0:	20000068 	.word	0x20000068
 80007d4:	40010c00 	.word	0x40010c00
 80007d8:	20000058 	.word	0x20000058
 80007dc:	20000088 	.word	0x20000088
 80007e0:	2000007c 	.word	0x2000007c

080007e4 <is_button_pressed>:

unsigned char is_button_pressed( uint8_t index ) {
 80007e4:	b480      	push	{r7}
 80007e6:	b083      	sub	sp, #12
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	4603      	mov	r3, r0
 80007ec:	71fb      	strb	r3, [r7, #7]
	if( index >= N0_OF_BUTTONS ) return 0;
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <is_button_pressed+0x14>
 80007f4:	2300      	movs	r3, #0
 80007f6:	e007      	b.n	8000808 <is_button_pressed+0x24>
	return ( buttonBuffer[index] == BUTTON_IS_PRESSED ) ;
 80007f8:	79fb      	ldrb	r3, [r7, #7]
 80007fa:	4a06      	ldr	r2, [pc, #24]	; (8000814 <is_button_pressed+0x30>)
 80007fc:	5cd3      	ldrb	r3, [r2, r3]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	bf0c      	ite	eq
 8000802:	2301      	moveq	r3, #1
 8000804:	2300      	movne	r3, #0
 8000806:	b2db      	uxtb	r3, r3
}
 8000808:	4618      	mov	r0, r3
 800080a:	370c      	adds	r7, #12
 800080c:	46bd      	mov	sp, r7
 800080e:	bc80      	pop	{r7}
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	20000058 	.word	0x20000058

08000818 <is_button_pressed_1s>:

unsigned char is_button_pressed_1s( unsigned char index ) {
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
 800081e:	4603      	mov	r3, r0
 8000820:	71fb      	strb	r3, [r7, #7]
	if( index >= N0_OF_BUTTONS ) return 0xff ;
 8000822:	79fb      	ldrb	r3, [r7, #7]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <is_button_pressed_1s+0x14>
 8000828:	23ff      	movs	r3, #255	; 0xff
 800082a:	e007      	b.n	800083c <is_button_pressed_1s+0x24>
	return ( flagForButtonPress1s [index] == 1) ;
 800082c:	79fb      	ldrb	r3, [r7, #7]
 800082e:	4a06      	ldr	r2, [pc, #24]	; (8000848 <is_button_pressed_1s+0x30>)
 8000830:	5cd3      	ldrb	r3, [r2, r3]
 8000832:	2b01      	cmp	r3, #1
 8000834:	bf0c      	ite	eq
 8000836:	2301      	moveq	r3, #1
 8000838:	2300      	movne	r3, #0
 800083a:	b2db      	uxtb	r3, r3
}
 800083c:	4618      	mov	r0, r3
 800083e:	370c      	adds	r7, #12
 8000840:	46bd      	mov	sp, r7
 8000842:	bc80      	pop	{r7}
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	2000007c 	.word	0x2000007c

0800084c <button_reading_2>:


// BUTTON 2
void button_reading_2( void ) {
 800084c:	b590      	push	{r4, r7, lr}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
	for (char i = 0; i < N0_OF_BUTTONS; i ++) {
 8000852:	2300      	movs	r3, #0
 8000854:	71fb      	strb	r3, [r7, #7]
 8000856:	e042      	b.n	80008de <button_reading_2+0x92>

		debounceButtonBuffer2_2[i] = debounceButtonBuffer1_2[i];
 8000858:	79fa      	ldrb	r2, [r7, #7]
 800085a:	79fb      	ldrb	r3, [r7, #7]
 800085c:	4924      	ldr	r1, [pc, #144]	; (80008f0 <button_reading_2+0xa4>)
 800085e:	5c89      	ldrb	r1, [r1, r2]
 8000860:	4a24      	ldr	r2, [pc, #144]	; (80008f4 <button_reading_2+0xa8>)
 8000862:	54d1      	strb	r1, [r2, r3]

		debounceButtonBuffer1_2[i] = HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port,BUTTON_2_Pin);
 8000864:	79fc      	ldrb	r4, [r7, #7]
 8000866:	2102      	movs	r1, #2
 8000868:	4823      	ldr	r0, [pc, #140]	; (80008f8 <button_reading_2+0xac>)
 800086a:	f001 f88d 	bl	8001988 <HAL_GPIO_ReadPin>
 800086e:	4603      	mov	r3, r0
 8000870:	461a      	mov	r2, r3
 8000872:	4b1f      	ldr	r3, [pc, #124]	; (80008f0 <button_reading_2+0xa4>)
 8000874:	551a      	strb	r2, [r3, r4]

		if(debounceButtonBuffer1_2[i] == debounceButtonBuffer2_2[i])
 8000876:	79fb      	ldrb	r3, [r7, #7]
 8000878:	4a1d      	ldr	r2, [pc, #116]	; (80008f0 <button_reading_2+0xa4>)
 800087a:	5cd2      	ldrb	r2, [r2, r3]
 800087c:	79fb      	ldrb	r3, [r7, #7]
 800087e:	491d      	ldr	r1, [pc, #116]	; (80008f4 <button_reading_2+0xa8>)
 8000880:	5ccb      	ldrb	r3, [r1, r3]
 8000882:	429a      	cmp	r2, r3
 8000884:	d105      	bne.n	8000892 <button_reading_2+0x46>
			buttonBuffer_2[i] = debounceButtonBuffer1_2[i];
 8000886:	79fa      	ldrb	r2, [r7, #7]
 8000888:	79fb      	ldrb	r3, [r7, #7]
 800088a:	4919      	ldr	r1, [pc, #100]	; (80008f0 <button_reading_2+0xa4>)
 800088c:	5c89      	ldrb	r1, [r1, r2]
 800088e:	4a1b      	ldr	r2, [pc, #108]	; (80008fc <button_reading_2+0xb0>)
 8000890:	54d1      	strb	r1, [r2, r3]

		if( buttonBuffer_2[i] == BUTTON_IS_PRESSED ) {
 8000892:	79fb      	ldrb	r3, [r7, #7]
 8000894:	4a19      	ldr	r2, [pc, #100]	; (80008fc <button_reading_2+0xb0>)
 8000896:	5cd3      	ldrb	r3, [r2, r3]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d114      	bne.n	80008c6 <button_reading_2+0x7a>
			// if a button is pressed , we start counting

			if( counterForButtonPress1s_2[i] < DURATION_FOR_AUTO_INCREASING ) {
 800089c:	79fb      	ldrb	r3, [r7, #7]
 800089e:	4a18      	ldr	r2, [pc, #96]	; (8000900 <button_reading_2+0xb4>)
 80008a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008a4:	2b09      	cmp	r3, #9
 80008a6:	d809      	bhi.n	80008bc <button_reading_2+0x70>
				counterForButtonPress1s_2[i]++;
 80008a8:	79fb      	ldrb	r3, [r7, #7]
 80008aa:	4a15      	ldr	r2, [pc, #84]	; (8000900 <button_reading_2+0xb4>)
 80008ac:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80008b0:	3201      	adds	r2, #1
 80008b2:	b291      	uxth	r1, r2
 80008b4:	4a12      	ldr	r2, [pc, #72]	; (8000900 <button_reading_2+0xb4>)
 80008b6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80008ba:	e00d      	b.n	80008d8 <button_reading_2+0x8c>
			}
			else {
				// the flag is turned on when 1 second has passed
				// since the button is pressed.
				flagForButtonPress1s_2[i] = 1;
 80008bc:	79fb      	ldrb	r3, [r7, #7]
 80008be:	4a11      	ldr	r2, [pc, #68]	; (8000904 <button_reading_2+0xb8>)
 80008c0:	2101      	movs	r1, #1
 80008c2:	54d1      	strb	r1, [r2, r3]
 80008c4:	e008      	b.n	80008d8 <button_reading_2+0x8c>
				// todo
			}
		}
		else {
			counterForButtonPress1s_2[i] = 0;
 80008c6:	79fb      	ldrb	r3, [r7, #7]
 80008c8:	4a0d      	ldr	r2, [pc, #52]	; (8000900 <button_reading_2+0xb4>)
 80008ca:	2100      	movs	r1, #0
 80008cc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			flagForButtonPress1s_2[i] = 0;
 80008d0:	79fb      	ldrb	r3, [r7, #7]
 80008d2:	4a0c      	ldr	r2, [pc, #48]	; (8000904 <button_reading_2+0xb8>)
 80008d4:	2100      	movs	r1, #0
 80008d6:	54d1      	strb	r1, [r2, r3]
	for (char i = 0; i < N0_OF_BUTTONS; i ++) {
 80008d8:	79fb      	ldrb	r3, [r7, #7]
 80008da:	3301      	adds	r3, #1
 80008dc:	71fb      	strb	r3, [r7, #7]
 80008de:	79fb      	ldrb	r3, [r7, #7]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d0b9      	beq.n	8000858 <button_reading_2+0xc>
		}
	}
}
 80008e4:	bf00      	nop
 80008e6:	bf00      	nop
 80008e8:	370c      	adds	r7, #12
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd90      	pop	{r4, r7, pc}
 80008ee:	bf00      	nop
 80008f0:	2000006c 	.word	0x2000006c
 80008f4:	20000070 	.word	0x20000070
 80008f8:	40010c00 	.word	0x40010c00
 80008fc:	2000005c 	.word	0x2000005c
 8000900:	2000008c 	.word	0x2000008c
 8000904:	20000080 	.word	0x20000080

08000908 <is_button_pressed_2>:

unsigned char is_button_pressed_2( uint8_t index ) {
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
 800090e:	4603      	mov	r3, r0
 8000910:	71fb      	strb	r3, [r7, #7]
	if( index >= N0_OF_BUTTONS ) return 0;
 8000912:	79fb      	ldrb	r3, [r7, #7]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <is_button_pressed_2+0x14>
 8000918:	2300      	movs	r3, #0
 800091a:	e007      	b.n	800092c <is_button_pressed_2+0x24>
	return ( buttonBuffer_2[index] == BUTTON_IS_PRESSED );
 800091c:	79fb      	ldrb	r3, [r7, #7]
 800091e:	4a06      	ldr	r2, [pc, #24]	; (8000938 <is_button_pressed_2+0x30>)
 8000920:	5cd3      	ldrb	r3, [r2, r3]
 8000922:	2b00      	cmp	r3, #0
 8000924:	bf0c      	ite	eq
 8000926:	2301      	moveq	r3, #1
 8000928:	2300      	movne	r3, #0
 800092a:	b2db      	uxtb	r3, r3
}
 800092c:	4618      	mov	r0, r3
 800092e:	370c      	adds	r7, #12
 8000930:	46bd      	mov	sp, r7
 8000932:	bc80      	pop	{r7}
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	2000005c 	.word	0x2000005c

0800093c <is_button_pressed_1s_2>:

unsigned char is_button_pressed_1s_2( unsigned char index ) {
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	4603      	mov	r3, r0
 8000944:	71fb      	strb	r3, [r7, #7]
	if( index >= N0_OF_BUTTONS ) return 0xff;
 8000946:	79fb      	ldrb	r3, [r7, #7]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <is_button_pressed_1s_2+0x14>
 800094c:	23ff      	movs	r3, #255	; 0xff
 800094e:	e007      	b.n	8000960 <is_button_pressed_1s_2+0x24>
	return ( flagForButtonPress1s_2[index] == 1) ;
 8000950:	79fb      	ldrb	r3, [r7, #7]
 8000952:	4a06      	ldr	r2, [pc, #24]	; (800096c <is_button_pressed_1s_2+0x30>)
 8000954:	5cd3      	ldrb	r3, [r2, r3]
 8000956:	2b01      	cmp	r3, #1
 8000958:	bf0c      	ite	eq
 800095a:	2301      	moveq	r3, #1
 800095c:	2300      	movne	r3, #0
 800095e:	b2db      	uxtb	r3, r3
}
 8000960:	4618      	mov	r0, r3
 8000962:	370c      	adds	r7, #12
 8000964:	46bd      	mov	sp, r7
 8000966:	bc80      	pop	{r7}
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	20000080 	.word	0x20000080

08000970 <button_reading_3>:

// BUTTON 3
void button_reading_3( void ) {
 8000970:	b590      	push	{r4, r7, lr}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
	for (char i = 0; i < N0_OF_BUTTONS; i ++) {
 8000976:	2300      	movs	r3, #0
 8000978:	71fb      	strb	r3, [r7, #7]
 800097a:	e042      	b.n	8000a02 <button_reading_3+0x92>

		debounceButtonBuffer2_3[i] = debounceButtonBuffer1_3[i];
 800097c:	79fa      	ldrb	r2, [r7, #7]
 800097e:	79fb      	ldrb	r3, [r7, #7]
 8000980:	4924      	ldr	r1, [pc, #144]	; (8000a14 <button_reading_3+0xa4>)
 8000982:	5c89      	ldrb	r1, [r1, r2]
 8000984:	4a24      	ldr	r2, [pc, #144]	; (8000a18 <button_reading_3+0xa8>)
 8000986:	54d1      	strb	r1, [r2, r3]

		debounceButtonBuffer1_3[i] = HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port,BUTTON_3_Pin);
 8000988:	79fc      	ldrb	r4, [r7, #7]
 800098a:	2104      	movs	r1, #4
 800098c:	4823      	ldr	r0, [pc, #140]	; (8000a1c <button_reading_3+0xac>)
 800098e:	f000 fffb 	bl	8001988 <HAL_GPIO_ReadPin>
 8000992:	4603      	mov	r3, r0
 8000994:	461a      	mov	r2, r3
 8000996:	4b1f      	ldr	r3, [pc, #124]	; (8000a14 <button_reading_3+0xa4>)
 8000998:	551a      	strb	r2, [r3, r4]

		if(debounceButtonBuffer1_3[i] == debounceButtonBuffer2_3[i])
 800099a:	79fb      	ldrb	r3, [r7, #7]
 800099c:	4a1d      	ldr	r2, [pc, #116]	; (8000a14 <button_reading_3+0xa4>)
 800099e:	5cd2      	ldrb	r2, [r2, r3]
 80009a0:	79fb      	ldrb	r3, [r7, #7]
 80009a2:	491d      	ldr	r1, [pc, #116]	; (8000a18 <button_reading_3+0xa8>)
 80009a4:	5ccb      	ldrb	r3, [r1, r3]
 80009a6:	429a      	cmp	r2, r3
 80009a8:	d105      	bne.n	80009b6 <button_reading_3+0x46>
			buttonBuffer_3[i] = debounceButtonBuffer1_3[i];
 80009aa:	79fa      	ldrb	r2, [r7, #7]
 80009ac:	79fb      	ldrb	r3, [r7, #7]
 80009ae:	4919      	ldr	r1, [pc, #100]	; (8000a14 <button_reading_3+0xa4>)
 80009b0:	5c89      	ldrb	r1, [r1, r2]
 80009b2:	4a1b      	ldr	r2, [pc, #108]	; (8000a20 <button_reading_3+0xb0>)
 80009b4:	54d1      	strb	r1, [r2, r3]

		if( buttonBuffer_3[i] == BUTTON_IS_PRESSED ) {
 80009b6:	79fb      	ldrb	r3, [r7, #7]
 80009b8:	4a19      	ldr	r2, [pc, #100]	; (8000a20 <button_reading_3+0xb0>)
 80009ba:	5cd3      	ldrb	r3, [r2, r3]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d114      	bne.n	80009ea <button_reading_3+0x7a>
			// if a button is pressed , we start counting

			if( counterForButtonPress1s_3[i] < DURATION_FOR_AUTO_INCREASING ) {
 80009c0:	79fb      	ldrb	r3, [r7, #7]
 80009c2:	4a18      	ldr	r2, [pc, #96]	; (8000a24 <button_reading_3+0xb4>)
 80009c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009c8:	2b09      	cmp	r3, #9
 80009ca:	d809      	bhi.n	80009e0 <button_reading_3+0x70>
				counterForButtonPress1s_3[i]++;
 80009cc:	79fb      	ldrb	r3, [r7, #7]
 80009ce:	4a15      	ldr	r2, [pc, #84]	; (8000a24 <button_reading_3+0xb4>)
 80009d0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80009d4:	3201      	adds	r2, #1
 80009d6:	b291      	uxth	r1, r2
 80009d8:	4a12      	ldr	r2, [pc, #72]	; (8000a24 <button_reading_3+0xb4>)
 80009da:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80009de:	e00d      	b.n	80009fc <button_reading_3+0x8c>
			}
			else {
				// the flag is turned on when 1 second has passed
				// since the button is pressed.
				flagForButtonPress1s_3[i] = 1;
 80009e0:	79fb      	ldrb	r3, [r7, #7]
 80009e2:	4a11      	ldr	r2, [pc, #68]	; (8000a28 <button_reading_3+0xb8>)
 80009e4:	2101      	movs	r1, #1
 80009e6:	54d1      	strb	r1, [r2, r3]
 80009e8:	e008      	b.n	80009fc <button_reading_3+0x8c>
				// todo
			}
		}
		else {
			counterForButtonPress1s_3[i] = 0;
 80009ea:	79fb      	ldrb	r3, [r7, #7]
 80009ec:	4a0d      	ldr	r2, [pc, #52]	; (8000a24 <button_reading_3+0xb4>)
 80009ee:	2100      	movs	r1, #0
 80009f0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			flagForButtonPress1s_3[i] = 0;
 80009f4:	79fb      	ldrb	r3, [r7, #7]
 80009f6:	4a0c      	ldr	r2, [pc, #48]	; (8000a28 <button_reading_3+0xb8>)
 80009f8:	2100      	movs	r1, #0
 80009fa:	54d1      	strb	r1, [r2, r3]
	for (char i = 0; i < N0_OF_BUTTONS; i ++) {
 80009fc:	79fb      	ldrb	r3, [r7, #7]
 80009fe:	3301      	adds	r3, #1
 8000a00:	71fb      	strb	r3, [r7, #7]
 8000a02:	79fb      	ldrb	r3, [r7, #7]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d0b9      	beq.n	800097c <button_reading_3+0xc>
		}
	}
}
 8000a08:	bf00      	nop
 8000a0a:	bf00      	nop
 8000a0c:	370c      	adds	r7, #12
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd90      	pop	{r4, r7, pc}
 8000a12:	bf00      	nop
 8000a14:	20000074 	.word	0x20000074
 8000a18:	20000078 	.word	0x20000078
 8000a1c:	40010c00 	.word	0x40010c00
 8000a20:	20000060 	.word	0x20000060
 8000a24:	20000090 	.word	0x20000090
 8000a28:	20000084 	.word	0x20000084

08000a2c <is_button_pressed_3>:

unsigned char is_button_pressed_3( uint8_t index ) {
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	4603      	mov	r3, r0
 8000a34:	71fb      	strb	r3, [r7, #7]
	if( index >= N0_OF_BUTTONS ) return 0;
 8000a36:	79fb      	ldrb	r3, [r7, #7]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <is_button_pressed_3+0x14>
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	e007      	b.n	8000a50 <is_button_pressed_3+0x24>
	return ( buttonBuffer_3[index] == BUTTON_IS_PRESSED ) ;
 8000a40:	79fb      	ldrb	r3, [r7, #7]
 8000a42:	4a06      	ldr	r2, [pc, #24]	; (8000a5c <is_button_pressed_3+0x30>)
 8000a44:	5cd3      	ldrb	r3, [r2, r3]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	bf0c      	ite	eq
 8000a4a:	2301      	moveq	r3, #1
 8000a4c:	2300      	movne	r3, #0
 8000a4e:	b2db      	uxtb	r3, r3
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	370c      	adds	r7, #12
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bc80      	pop	{r7}
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	20000060 	.word	0x20000060

08000a60 <is_button_pressed_1s_3>:

unsigned char is_button_pressed_1s_3( unsigned char index ) {
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	4603      	mov	r3, r0
 8000a68:	71fb      	strb	r3, [r7, #7]
	if( index >= N0_OF_BUTTONS ) return 0xff ;
 8000a6a:	79fb      	ldrb	r3, [r7, #7]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <is_button_pressed_1s_3+0x14>
 8000a70:	23ff      	movs	r3, #255	; 0xff
 8000a72:	e007      	b.n	8000a84 <is_button_pressed_1s_3+0x24>
	return ( flagForButtonPress1s_3[index] == 1) ;
 8000a74:	79fb      	ldrb	r3, [r7, #7]
 8000a76:	4a06      	ldr	r2, [pc, #24]	; (8000a90 <is_button_pressed_1s_3+0x30>)
 8000a78:	5cd3      	ldrb	r3, [r2, r3]
 8000a7a:	2b01      	cmp	r3, #1
 8000a7c:	bf0c      	ite	eq
 8000a7e:	2301      	moveq	r3, #1
 8000a80:	2300      	movne	r3, #0
 8000a82:	b2db      	uxtb	r3, r3
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	370c      	adds	r7, #12
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bc80      	pop	{r7}
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	20000084 	.word	0x20000084

08000a94 <displayled>:
#define NUMBER_OF_DECIMAL_DIGITS	10

static uint8_t sevenSegmentLEDConversion[NUMBER_OF_DECIMAL_DIGITS] = {0x01, 0x4f, 0x12, 0x06, 0x4C, 0x24, 0x20, 0x0f, 0x00, 0x04};
const int MAX_LED = 4;

void displayled(int num) {
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b084      	sub	sp, #16
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
	uint8_t the_number = sevenSegmentLEDConversion[num];
 8000a9c:	4a23      	ldr	r2, [pc, #140]	; (8000b2c <displayled+0x98>)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	4413      	add	r3, r2
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(LED1_G_GPIO_Port, LED1_G_Pin, the_number & 0x01);
 8000aa6:	7bfb      	ldrb	r3, [r7, #15]
 8000aa8:	f003 0301 	and.w	r3, r3, #1
 8000aac:	b2db      	uxtb	r3, r3
 8000aae:	461a      	mov	r2, r3
 8000ab0:	2140      	movs	r1, #64	; 0x40
 8000ab2:	481f      	ldr	r0, [pc, #124]	; (8000b30 <displayled+0x9c>)
 8000ab4:	f000 ff7f 	bl	80019b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_F_GPIO_Port, LED1_F_Pin, the_number & 0x02);
 8000ab8:	7bfb      	ldrb	r3, [r7, #15]
 8000aba:	f003 0302 	and.w	r3, r3, #2
 8000abe:	b2db      	uxtb	r3, r3
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	2120      	movs	r1, #32
 8000ac4:	481a      	ldr	r0, [pc, #104]	; (8000b30 <displayled+0x9c>)
 8000ac6:	f000 ff76 	bl	80019b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_E_GPIO_Port, LED1_E_Pin, the_number & 0x04);
 8000aca:	7bfb      	ldrb	r3, [r7, #15]
 8000acc:	f003 0304 	and.w	r3, r3, #4
 8000ad0:	b2db      	uxtb	r3, r3
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	2110      	movs	r1, #16
 8000ad6:	4816      	ldr	r0, [pc, #88]	; (8000b30 <displayled+0x9c>)
 8000ad8:	f000 ff6d 	bl	80019b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_D_GPIO_Port, LED1_D_Pin, the_number & 0x08);
 8000adc:	7bfb      	ldrb	r3, [r7, #15]
 8000ade:	f003 0308 	and.w	r3, r3, #8
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	2108      	movs	r1, #8
 8000ae8:	4811      	ldr	r0, [pc, #68]	; (8000b30 <displayled+0x9c>)
 8000aea:	f000 ff64 	bl	80019b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_C_GPIO_Port, LED1_C_Pin, the_number & 0x10);
 8000aee:	7bfb      	ldrb	r3, [r7, #15]
 8000af0:	f003 0310 	and.w	r3, r3, #16
 8000af4:	b2db      	uxtb	r3, r3
 8000af6:	461a      	mov	r2, r3
 8000af8:	2104      	movs	r1, #4
 8000afa:	480d      	ldr	r0, [pc, #52]	; (8000b30 <displayled+0x9c>)
 8000afc:	f000 ff5b 	bl	80019b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_B_GPIO_Port, LED1_B_Pin, the_number & 0x20);
 8000b00:	7bfb      	ldrb	r3, [r7, #15]
 8000b02:	f003 0320 	and.w	r3, r3, #32
 8000b06:	b2db      	uxtb	r3, r3
 8000b08:	461a      	mov	r2, r3
 8000b0a:	2102      	movs	r1, #2
 8000b0c:	4808      	ldr	r0, [pc, #32]	; (8000b30 <displayled+0x9c>)
 8000b0e:	f000 ff52 	bl	80019b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_A_GPIO_Port, LED1_A_Pin, the_number & 0x40);
 8000b12:	7bfb      	ldrb	r3, [r7, #15]
 8000b14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b18:	b2db      	uxtb	r3, r3
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	2101      	movs	r1, #1
 8000b1e:	4804      	ldr	r0, [pc, #16]	; (8000b30 <displayled+0x9c>)
 8000b20:	f000 ff49 	bl	80019b6 <HAL_GPIO_WritePin>
}
 8000b24:	bf00      	nop
 8000b26:	3710      	adds	r7, #16
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	20000018 	.word	0x20000018
 8000b30:	40010800 	.word	0x40010800

08000b34 <setupled>:

void setupled(int index) {
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
	if(index == 0) {
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d10b      	bne.n	8000b5a <setupled+0x26>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 0);
 8000b42:	2200      	movs	r2, #0
 8000b44:	2120      	movs	r1, #32
 8000b46:	481a      	ldr	r0, [pc, #104]	; (8000bb0 <setupled+0x7c>)
 8000b48:	f000 ff35 	bl	80019b6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 1);
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b52:	4817      	ldr	r0, [pc, #92]	; (8000bb0 <setupled+0x7c>)
 8000b54:	f000 ff2f 	bl	80019b6 <HAL_GPIO_WritePin>
	}
	else {
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 0);
	}
}
 8000b58:	e026      	b.n	8000ba8 <setupled+0x74>
	else if(index == 1) {
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2b01      	cmp	r3, #1
 8000b5e:	d10a      	bne.n	8000b76 <setupled+0x42>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 1);
 8000b60:	2201      	movs	r2, #1
 8000b62:	2120      	movs	r1, #32
 8000b64:	4812      	ldr	r0, [pc, #72]	; (8000bb0 <setupled+0x7c>)
 8000b66:	f000 ff26 	bl	80019b6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 0);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2140      	movs	r1, #64	; 0x40
 8000b6e:	4810      	ldr	r0, [pc, #64]	; (8000bb0 <setupled+0x7c>)
 8000b70:	f000 ff21 	bl	80019b6 <HAL_GPIO_WritePin>
}
 8000b74:	e018      	b.n	8000ba8 <setupled+0x74>
	else if(index == 2) {
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	2b02      	cmp	r3, #2
 8000b7a:	d10a      	bne.n	8000b92 <setupled+0x5e>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	2140      	movs	r1, #64	; 0x40
 8000b80:	480b      	ldr	r0, [pc, #44]	; (8000bb0 <setupled+0x7c>)
 8000b82:	f000 ff18 	bl	80019b6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 0);
 8000b86:	2200      	movs	r2, #0
 8000b88:	2180      	movs	r1, #128	; 0x80
 8000b8a:	4809      	ldr	r0, [pc, #36]	; (8000bb0 <setupled+0x7c>)
 8000b8c:	f000 ff13 	bl	80019b6 <HAL_GPIO_WritePin>
}
 8000b90:	e00a      	b.n	8000ba8 <setupled+0x74>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);
 8000b92:	2201      	movs	r2, #1
 8000b94:	2180      	movs	r1, #128	; 0x80
 8000b96:	4806      	ldr	r0, [pc, #24]	; (8000bb0 <setupled+0x7c>)
 8000b98:	f000 ff0d 	bl	80019b6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 0);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ba2:	4803      	ldr	r0, [pc, #12]	; (8000bb0 <setupled+0x7c>)
 8000ba4:	f000 ff07 	bl	80019b6 <HAL_GPIO_WritePin>
}
 8000ba8:	bf00      	nop
 8000baa:	3708      	adds	r7, #8
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	40010c00 	.word	0x40010c00

08000bb4 <update7SEG>:

void update7SEG ( int index, int num ) {
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
 8000bbc:	6039      	str	r1, [r7, #0]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2b03      	cmp	r3, #3
 8000bc2:	d827      	bhi.n	8000c14 <update7SEG+0x60>
 8000bc4:	a201      	add	r2, pc, #4	; (adr r2, 8000bcc <update7SEG+0x18>)
 8000bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bca:	bf00      	nop
 8000bcc:	08000bdd 	.word	0x08000bdd
 8000bd0:	08000beb 	.word	0x08000beb
 8000bd4:	08000bf9 	.word	0x08000bf9
 8000bd8:	08000c07 	.word	0x08000c07
	 switch (index) {
	 case 0:
		 // Display the first 7 SEG with led_buffer [0]
		 setupled(0);
 8000bdc:	2000      	movs	r0, #0
 8000bde:	f7ff ffa9 	bl	8000b34 <setupled>
		 displayled(num);
 8000be2:	6838      	ldr	r0, [r7, #0]
 8000be4:	f7ff ff56 	bl	8000a94 <displayled>
		 break;
 8000be8:	e015      	b.n	8000c16 <update7SEG+0x62>
	 case 1:
		 // Display the second 7 SEG with led_buffer [1]
		 setupled(1);
 8000bea:	2001      	movs	r0, #1
 8000bec:	f7ff ffa2 	bl	8000b34 <setupled>
		 displayled(num);
 8000bf0:	6838      	ldr	r0, [r7, #0]
 8000bf2:	f7ff ff4f 	bl	8000a94 <displayled>
		 break;
 8000bf6:	e00e      	b.n	8000c16 <update7SEG+0x62>
	 case 2:
		 // Display the third 7 SEG with led_buffer [2]
		 setupled(2);
 8000bf8:	2002      	movs	r0, #2
 8000bfa:	f7ff ff9b 	bl	8000b34 <setupled>
		 displayled(num);
 8000bfe:	6838      	ldr	r0, [r7, #0]
 8000c00:	f7ff ff48 	bl	8000a94 <displayled>
		 break;
 8000c04:	e007      	b.n	8000c16 <update7SEG+0x62>
	 case 3:
		 // Display the forth 7 SEG with led_buffer [3]
		 setupled(3);
 8000c06:	2003      	movs	r0, #3
 8000c08:	f7ff ff94 	bl	8000b34 <setupled>
		 displayled(num);
 8000c0c:	6838      	ldr	r0, [r7, #0]
 8000c0e:	f7ff ff41 	bl	8000a94 <displayled>
		 break;
 8000c12:	e000      	b.n	8000c16 <update7SEG+0x62>
	 default :
		 break;
 8000c14:	bf00      	nop
	 }
}
 8000c16:	bf00      	nop
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop

08000c20 <updateLED>:

void updateLED(int time1, int time2) {
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	6039      	str	r1, [r7, #0]
	update7SEG(0, time1/10);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	4a21      	ldr	r2, [pc, #132]	; (8000cb4 <updateLED+0x94>)
 8000c2e:	fb82 1203 	smull	r1, r2, r2, r3
 8000c32:	1092      	asrs	r2, r2, #2
 8000c34:	17db      	asrs	r3, r3, #31
 8000c36:	1ad3      	subs	r3, r2, r3
 8000c38:	4619      	mov	r1, r3
 8000c3a:	2000      	movs	r0, #0
 8000c3c:	f7ff ffba 	bl	8000bb4 <update7SEG>
	HAL_Delay(70);
 8000c40:	2046      	movs	r0, #70	; 0x46
 8000c42:	f000 fbf5 	bl	8001430 <HAL_Delay>
	update7SEG(1, time1 % 10);
 8000c46:	687a      	ldr	r2, [r7, #4]
 8000c48:	4b1a      	ldr	r3, [pc, #104]	; (8000cb4 <updateLED+0x94>)
 8000c4a:	fb83 1302 	smull	r1, r3, r3, r2
 8000c4e:	1099      	asrs	r1, r3, #2
 8000c50:	17d3      	asrs	r3, r2, #31
 8000c52:	1ac9      	subs	r1, r1, r3
 8000c54:	460b      	mov	r3, r1
 8000c56:	009b      	lsls	r3, r3, #2
 8000c58:	440b      	add	r3, r1
 8000c5a:	005b      	lsls	r3, r3, #1
 8000c5c:	1ad1      	subs	r1, r2, r3
 8000c5e:	2001      	movs	r0, #1
 8000c60:	f7ff ffa8 	bl	8000bb4 <update7SEG>
	HAL_Delay(70);
 8000c64:	2046      	movs	r0, #70	; 0x46
 8000c66:	f000 fbe3 	bl	8001430 <HAL_Delay>
	update7SEG(2, time2 / 10);
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	4a11      	ldr	r2, [pc, #68]	; (8000cb4 <updateLED+0x94>)
 8000c6e:	fb82 1203 	smull	r1, r2, r2, r3
 8000c72:	1092      	asrs	r2, r2, #2
 8000c74:	17db      	asrs	r3, r3, #31
 8000c76:	1ad3      	subs	r3, r2, r3
 8000c78:	4619      	mov	r1, r3
 8000c7a:	2002      	movs	r0, #2
 8000c7c:	f7ff ff9a 	bl	8000bb4 <update7SEG>
	HAL_Delay(70);
 8000c80:	2046      	movs	r0, #70	; 0x46
 8000c82:	f000 fbd5 	bl	8001430 <HAL_Delay>
	update7SEG(3, time2 % 10);
 8000c86:	683a      	ldr	r2, [r7, #0]
 8000c88:	4b0a      	ldr	r3, [pc, #40]	; (8000cb4 <updateLED+0x94>)
 8000c8a:	fb83 1302 	smull	r1, r3, r3, r2
 8000c8e:	1099      	asrs	r1, r3, #2
 8000c90:	17d3      	asrs	r3, r2, #31
 8000c92:	1ac9      	subs	r1, r1, r3
 8000c94:	460b      	mov	r3, r1
 8000c96:	009b      	lsls	r3, r3, #2
 8000c98:	440b      	add	r3, r1
 8000c9a:	005b      	lsls	r3, r3, #1
 8000c9c:	1ad1      	subs	r1, r2, r3
 8000c9e:	2003      	movs	r0, #3
 8000ca0:	f7ff ff88 	bl	8000bb4 <update7SEG>
	HAL_Delay(70);
 8000ca4:	2046      	movs	r0, #70	; 0x46
 8000ca6:	f000 fbc3 	bl	8001430 <HAL_Delay>
}
 8000caa:	bf00      	nop
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	66666667 	.word	0x66666667

08000cb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cbc:	f000 fb56 	bl	800136c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cc0:	f000 f80c 	bl	8000cdc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cc4:	f000 f892 	bl	8000dec <MX_GPIO_Init>
  MX_TIM2_Init();
 8000cc8:	f000 f844 	bl	8000d54 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000ccc:	4802      	ldr	r0, [pc, #8]	; (8000cd8 <main+0x20>)
 8000cce:	f001 fadb 	bl	8002288 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  fsm_for_input_processing();
 8000cd2:	f7ff fc4f 	bl	8000574 <fsm_for_input_processing>
 8000cd6:	e7fc      	b.n	8000cd2 <main+0x1a>
 8000cd8:	200000a8 	.word	0x200000a8

08000cdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b090      	sub	sp, #64	; 0x40
 8000ce0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ce2:	f107 0318 	add.w	r3, r7, #24
 8000ce6:	2228      	movs	r2, #40	; 0x28
 8000ce8:	2100      	movs	r1, #0
 8000cea:	4618      	mov	r0, r3
 8000cec:	f001 fe84 	bl	80029f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cf0:	1d3b      	adds	r3, r7, #4
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]
 8000cf6:	605a      	str	r2, [r3, #4]
 8000cf8:	609a      	str	r2, [r3, #8]
 8000cfa:	60da      	str	r2, [r3, #12]
 8000cfc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d02:	2301      	movs	r3, #1
 8000d04:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d06:	2310      	movs	r3, #16
 8000d08:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d0e:	f107 0318 	add.w	r3, r7, #24
 8000d12:	4618      	mov	r0, r3
 8000d14:	f000 fe80 	bl	8001a18 <HAL_RCC_OscConfig>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000d1e:	f000 f8c7 	bl	8000eb0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d22:	230f      	movs	r3, #15
 8000d24:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d26:	2300      	movs	r3, #0
 8000d28:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d32:	2300      	movs	r3, #0
 8000d34:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d36:	1d3b      	adds	r3, r7, #4
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f001 f8ec 	bl	8001f18 <HAL_RCC_ClockConfig>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000d46:	f000 f8b3 	bl	8000eb0 <Error_Handler>
  }
}
 8000d4a:	bf00      	nop
 8000d4c:	3740      	adds	r7, #64	; 0x40
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
	...

08000d54 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b086      	sub	sp, #24
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d5a:	f107 0308 	add.w	r3, r7, #8
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]
 8000d62:	605a      	str	r2, [r3, #4]
 8000d64:	609a      	str	r2, [r3, #8]
 8000d66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d68:	463b      	mov	r3, r7
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	601a      	str	r2, [r3, #0]
 8000d6e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d70:	4b1d      	ldr	r3, [pc, #116]	; (8000de8 <MX_TIM2_Init+0x94>)
 8000d72:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d76:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000d78:	4b1b      	ldr	r3, [pc, #108]	; (8000de8 <MX_TIM2_Init+0x94>)
 8000d7a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000d7e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d80:	4b19      	ldr	r3, [pc, #100]	; (8000de8 <MX_TIM2_Init+0x94>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8000d86:	4b18      	ldr	r3, [pc, #96]	; (8000de8 <MX_TIM2_Init+0x94>)
 8000d88:	2263      	movs	r2, #99	; 0x63
 8000d8a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d8c:	4b16      	ldr	r3, [pc, #88]	; (8000de8 <MX_TIM2_Init+0x94>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d92:	4b15      	ldr	r3, [pc, #84]	; (8000de8 <MX_TIM2_Init+0x94>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d98:	4813      	ldr	r0, [pc, #76]	; (8000de8 <MX_TIM2_Init+0x94>)
 8000d9a:	f001 fa25 	bl	80021e8 <HAL_TIM_Base_Init>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000da4:	f000 f884 	bl	8000eb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000da8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000dae:	f107 0308 	add.w	r3, r7, #8
 8000db2:	4619      	mov	r1, r3
 8000db4:	480c      	ldr	r0, [pc, #48]	; (8000de8 <MX_TIM2_Init+0x94>)
 8000db6:	f001 fbbb 	bl	8002530 <HAL_TIM_ConfigClockSource>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000dc0:	f000 f876 	bl	8000eb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dcc:	463b      	mov	r3, r7
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4805      	ldr	r0, [pc, #20]	; (8000de8 <MX_TIM2_Init+0x94>)
 8000dd2:	f001 fd83 	bl	80028dc <HAL_TIMEx_MasterConfigSynchronization>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000ddc:	f000 f868 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000de0:	bf00      	nop
 8000de2:	3718      	adds	r7, #24
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	200000a8 	.word	0x200000a8

08000dec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df2:	f107 0308 	add.w	r3, r7, #8
 8000df6:	2200      	movs	r2, #0
 8000df8:	601a      	str	r2, [r3, #0]
 8000dfa:	605a      	str	r2, [r3, #4]
 8000dfc:	609a      	str	r2, [r3, #8]
 8000dfe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e00:	4b28      	ldr	r3, [pc, #160]	; (8000ea4 <MX_GPIO_Init+0xb8>)
 8000e02:	699b      	ldr	r3, [r3, #24]
 8000e04:	4a27      	ldr	r2, [pc, #156]	; (8000ea4 <MX_GPIO_Init+0xb8>)
 8000e06:	f043 0304 	orr.w	r3, r3, #4
 8000e0a:	6193      	str	r3, [r2, #24]
 8000e0c:	4b25      	ldr	r3, [pc, #148]	; (8000ea4 <MX_GPIO_Init+0xb8>)
 8000e0e:	699b      	ldr	r3, [r3, #24]
 8000e10:	f003 0304 	and.w	r3, r3, #4
 8000e14:	607b      	str	r3, [r7, #4]
 8000e16:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e18:	4b22      	ldr	r3, [pc, #136]	; (8000ea4 <MX_GPIO_Init+0xb8>)
 8000e1a:	699b      	ldr	r3, [r3, #24]
 8000e1c:	4a21      	ldr	r2, [pc, #132]	; (8000ea4 <MX_GPIO_Init+0xb8>)
 8000e1e:	f043 0308 	orr.w	r3, r3, #8
 8000e22:	6193      	str	r3, [r2, #24]
 8000e24:	4b1f      	ldr	r3, [pc, #124]	; (8000ea4 <MX_GPIO_Init+0xb8>)
 8000e26:	699b      	ldr	r3, [r3, #24]
 8000e28:	f003 0308 	and.w	r3, r3, #8
 8000e2c:	603b      	str	r3, [r7, #0]
 8000e2e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_A_Pin|LED1_B_Pin|LED1_C_Pin|LED1_D_Pin
 8000e30:	2200      	movs	r2, #0
 8000e32:	f641 71ff 	movw	r1, #8191	; 0x1fff
 8000e36:	481c      	ldr	r0, [pc, #112]	; (8000ea8 <MX_GPIO_Init+0xbc>)
 8000e38:	f000 fdbd 	bl	80019b6 <HAL_GPIO_WritePin>
                          |LED1_E_Pin|LED1_F_Pin|LED1_G_Pin|RED_Pin
                          |YELLOW_Pin|GREEN_Pin|RED_HOR_Pin|YELLOW_HOR_Pin
                          |GREEN_HOR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin, GPIO_PIN_RESET);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8000e42:	481a      	ldr	r0, [pc, #104]	; (8000eac <MX_GPIO_Init+0xc0>)
 8000e44:	f000 fdb7 	bl	80019b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_A_Pin LED1_B_Pin LED1_C_Pin LED1_D_Pin
                           LED1_E_Pin LED1_F_Pin LED1_G_Pin RED_Pin
                           YELLOW_Pin GREEN_Pin RED_HOR_Pin YELLOW_HOR_Pin
                           GREEN_HOR_Pin */
  GPIO_InitStruct.Pin = LED1_A_Pin|LED1_B_Pin|LED1_C_Pin|LED1_D_Pin
 8000e48:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000e4c:	60bb      	str	r3, [r7, #8]
                          |LED1_E_Pin|LED1_F_Pin|LED1_G_Pin|RED_Pin
                          |YELLOW_Pin|GREEN_Pin|RED_HOR_Pin|YELLOW_HOR_Pin
                          |GREEN_HOR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e56:	2302      	movs	r3, #2
 8000e58:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5a:	f107 0308 	add.w	r3, r7, #8
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4811      	ldr	r0, [pc, #68]	; (8000ea8 <MX_GPIO_Init+0xbc>)
 8000e62:	f000 fc17 	bl	8001694 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin;
 8000e66:	2307      	movs	r3, #7
 8000e68:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e72:	f107 0308 	add.w	r3, r7, #8
 8000e76:	4619      	mov	r1, r3
 8000e78:	480c      	ldr	r0, [pc, #48]	; (8000eac <MX_GPIO_Init+0xc0>)
 8000e7a:	f000 fc0b 	bl	8001694 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN0_Pin EN1_Pin EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin;
 8000e7e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000e82:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e84:	2301      	movs	r3, #1
 8000e86:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e90:	f107 0308 	add.w	r3, r7, #8
 8000e94:	4619      	mov	r1, r3
 8000e96:	4805      	ldr	r0, [pc, #20]	; (8000eac <MX_GPIO_Init+0xc0>)
 8000e98:	f000 fbfc 	bl	8001694 <HAL_GPIO_Init>

}
 8000e9c:	bf00      	nop
 8000e9e:	3718      	adds	r7, #24
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	40021000 	.word	0x40021000
 8000ea8:	40010800 	.word	0x40010800
 8000eac:	40010c00 	.word	0x40010c00

08000eb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eb4:	b672      	cpsid	i
}
 8000eb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eb8:	e7fe      	b.n	8000eb8 <Error_Handler+0x8>
	...

08000ebc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b085      	sub	sp, #20
 8000ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ec2:	4b15      	ldr	r3, [pc, #84]	; (8000f18 <HAL_MspInit+0x5c>)
 8000ec4:	699b      	ldr	r3, [r3, #24]
 8000ec6:	4a14      	ldr	r2, [pc, #80]	; (8000f18 <HAL_MspInit+0x5c>)
 8000ec8:	f043 0301 	orr.w	r3, r3, #1
 8000ecc:	6193      	str	r3, [r2, #24]
 8000ece:	4b12      	ldr	r3, [pc, #72]	; (8000f18 <HAL_MspInit+0x5c>)
 8000ed0:	699b      	ldr	r3, [r3, #24]
 8000ed2:	f003 0301 	and.w	r3, r3, #1
 8000ed6:	60bb      	str	r3, [r7, #8]
 8000ed8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eda:	4b0f      	ldr	r3, [pc, #60]	; (8000f18 <HAL_MspInit+0x5c>)
 8000edc:	69db      	ldr	r3, [r3, #28]
 8000ede:	4a0e      	ldr	r2, [pc, #56]	; (8000f18 <HAL_MspInit+0x5c>)
 8000ee0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ee4:	61d3      	str	r3, [r2, #28]
 8000ee6:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <HAL_MspInit+0x5c>)
 8000ee8:	69db      	ldr	r3, [r3, #28]
 8000eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eee:	607b      	str	r3, [r7, #4]
 8000ef0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000ef2:	4b0a      	ldr	r3, [pc, #40]	; (8000f1c <HAL_MspInit+0x60>)
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000f06:	60fb      	str	r3, [r7, #12]
 8000f08:	4a04      	ldr	r2, [pc, #16]	; (8000f1c <HAL_MspInit+0x60>)
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	3714      	adds	r7, #20
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bc80      	pop	{r7}
 8000f16:	4770      	bx	lr
 8000f18:	40021000 	.word	0x40021000
 8000f1c:	40010000 	.word	0x40010000

08000f20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f30:	d113      	bne.n	8000f5a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f32:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <HAL_TIM_Base_MspInit+0x44>)
 8000f34:	69db      	ldr	r3, [r3, #28]
 8000f36:	4a0b      	ldr	r2, [pc, #44]	; (8000f64 <HAL_TIM_Base_MspInit+0x44>)
 8000f38:	f043 0301 	orr.w	r3, r3, #1
 8000f3c:	61d3      	str	r3, [r2, #28]
 8000f3e:	4b09      	ldr	r3, [pc, #36]	; (8000f64 <HAL_TIM_Base_MspInit+0x44>)
 8000f40:	69db      	ldr	r3, [r3, #28]
 8000f42:	f003 0301 	and.w	r3, r3, #1
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	201c      	movs	r0, #28
 8000f50:	f000 fb69 	bl	8001626 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f54:	201c      	movs	r0, #28
 8000f56:	f000 fb82 	bl	800165e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f5a:	bf00      	nop
 8000f5c:	3710      	adds	r7, #16
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40021000 	.word	0x40021000

08000f68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f6c:	e7fe      	b.n	8000f6c <NMI_Handler+0x4>

08000f6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f72:	e7fe      	b.n	8000f72 <HardFault_Handler+0x4>

08000f74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f78:	e7fe      	b.n	8000f78 <MemManage_Handler+0x4>

08000f7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f7e:	e7fe      	b.n	8000f7e <BusFault_Handler+0x4>

08000f80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f84:	e7fe      	b.n	8000f84 <UsageFault_Handler+0x4>

08000f86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f86:	b480      	push	{r7}
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bc80      	pop	{r7}
 8000f90:	4770      	bx	lr

08000f92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f92:	b480      	push	{r7}
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bc80      	pop	{r7}
 8000f9c:	4770      	bx	lr

08000f9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bc80      	pop	{r7}
 8000fa8:	4770      	bx	lr

08000faa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fae:	f000 fa23 	bl	80013f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
	...

08000fb8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000fbc:	4802      	ldr	r0, [pc, #8]	; (8000fc8 <TIM2_IRQHandler+0x10>)
 8000fbe:	f001 f9af 	bl	8002320 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	200000a8 	.word	0x200000a8

08000fcc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fd0:	bf00      	nop
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bc80      	pop	{r7}
 8000fd6:	4770      	bx	lr

08000fd8 <calculateScale>:
static int runOnce = 1;
static int blink_led_red = 0;
static int blink_led_yellow = 0;
static int blink_led_green = 0;

void calculateScale(TIM_HandleTypeDef * htim) {
 8000fd8:	b480      	push	{r7}
 8000fda:	b087      	sub	sp, #28
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
	uint32_t reload = htim->Instance->ARR;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fe6:	617b      	str	r3, [r7, #20]
	uint32_t pre = htim->Instance->PSC;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fee:	613b      	str	r3, [r7, #16]
	uint32_t final = 8000000/(reload*pre);
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	fb02 f303 	mul.w	r3, r2, r3
 8000ff8:	4a09      	ldr	r2, [pc, #36]	; (8001020 <calculateScale+0x48>)
 8000ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ffe:	60fb      	str	r3, [r7, #12]
	thescale = final*50/100;
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	2232      	movs	r2, #50	; 0x32
 8001004:	fb02 f303 	mul.w	r3, r2, r3
 8001008:	4a06      	ldr	r2, [pc, #24]	; (8001024 <calculateScale+0x4c>)
 800100a:	fba2 2303 	umull	r2, r3, r2, r3
 800100e:	095b      	lsrs	r3, r3, #5
 8001010:	4a05      	ldr	r2, [pc, #20]	; (8001028 <calculateScale+0x50>)
 8001012:	6013      	str	r3, [r2, #0]
}
 8001014:	bf00      	nop
 8001016:	371c      	adds	r7, #28
 8001018:	46bd      	mov	sp, r7
 800101a:	bc80      	pop	{r7}
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	007a1200 	.word	0x007a1200
 8001024:	51eb851f 	.word	0x51eb851f
 8001028:	20000098 	.word	0x20000098

0800102c <blink_LED_RED>:

void blink_LED_RED() {
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
	blink_led_red = 1;
 8001030:	4b16      	ldr	r3, [pc, #88]	; (800108c <blink_LED_RED+0x60>)
 8001032:	2201      	movs	r2, #1
 8001034:	601a      	str	r2, [r3, #0]
	blink_led_yellow = 0;
 8001036:	4b16      	ldr	r3, [pc, #88]	; (8001090 <blink_LED_RED+0x64>)
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
	blink_led_green = 0;
 800103c:	4b15      	ldr	r3, [pc, #84]	; (8001094 <blink_LED_RED+0x68>)
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(RED_GPIO_Port, RED_Pin, 1);
 8001042:	2201      	movs	r2, #1
 8001044:	2180      	movs	r1, #128	; 0x80
 8001046:	4814      	ldr	r0, [pc, #80]	; (8001098 <blink_LED_RED+0x6c>)
 8001048:	f000 fcb5 	bl	80019b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RED_HOR_GPIO_Port, RED_HOR_Pin, 1);
 800104c:	2201      	movs	r2, #1
 800104e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001052:	4811      	ldr	r0, [pc, #68]	; (8001098 <blink_LED_RED+0x6c>)
 8001054:	f000 fcaf 	bl	80019b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(YELLOW_GPIO_Port, YELLOW_Pin, 0);
 8001058:	2200      	movs	r2, #0
 800105a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800105e:	480e      	ldr	r0, [pc, #56]	; (8001098 <blink_LED_RED+0x6c>)
 8001060:	f000 fca9 	bl	80019b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW_HOR_GPIO_Port, YELLOW_HOR_Pin, 0);
 8001064:	2200      	movs	r2, #0
 8001066:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800106a:	480b      	ldr	r0, [pc, #44]	; (8001098 <blink_LED_RED+0x6c>)
 800106c:	f000 fca3 	bl	80019b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_GPIO_Port, GREEN_Pin, 0);
 8001070:	2200      	movs	r2, #0
 8001072:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001076:	4808      	ldr	r0, [pc, #32]	; (8001098 <blink_LED_RED+0x6c>)
 8001078:	f000 fc9d 	bl	80019b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_HOR_GPIO_Port, GREEN_HOR_Pin, 0);
 800107c:	2200      	movs	r2, #0
 800107e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001082:	4805      	ldr	r0, [pc, #20]	; (8001098 <blink_LED_RED+0x6c>)
 8001084:	f000 fc97 	bl	80019b6 <HAL_GPIO_WritePin>

}
 8001088:	bf00      	nop
 800108a:	bd80      	pop	{r7, pc}
 800108c:	2000009c 	.word	0x2000009c
 8001090:	200000a0 	.word	0x200000a0
 8001094:	200000a4 	.word	0x200000a4
 8001098:	40010800 	.word	0x40010800

0800109c <turn_off_blink_LED_RED>:
void turn_off_blink_LED_RED() {
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED_GPIO_Port, RED_Pin, 0);
 80010a0:	2200      	movs	r2, #0
 80010a2:	2180      	movs	r1, #128	; 0x80
 80010a4:	4808      	ldr	r0, [pc, #32]	; (80010c8 <turn_off_blink_LED_RED+0x2c>)
 80010a6:	f000 fc86 	bl	80019b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RED_HOR_GPIO_Port, RED_HOR_Pin, 0);
 80010aa:	2200      	movs	r2, #0
 80010ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010b0:	4805      	ldr	r0, [pc, #20]	; (80010c8 <turn_off_blink_LED_RED+0x2c>)
 80010b2:	f000 fc80 	bl	80019b6 <HAL_GPIO_WritePin>
	count = 0;
 80010b6:	4b05      	ldr	r3, [pc, #20]	; (80010cc <turn_off_blink_LED_RED+0x30>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
	blink_led_red = 0;
 80010bc:	4b04      	ldr	r3, [pc, #16]	; (80010d0 <turn_off_blink_LED_RED+0x34>)
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	40010800 	.word	0x40010800
 80010cc:	20000094 	.word	0x20000094
 80010d0:	2000009c 	.word	0x2000009c

080010d4 <blink_LED_YELLOW>:

void blink_LED_YELLOW(){
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
	blink_led_red = 0;
 80010d8:	4b16      	ldr	r3, [pc, #88]	; (8001134 <blink_LED_YELLOW+0x60>)
 80010da:	2200      	movs	r2, #0
 80010dc:	601a      	str	r2, [r3, #0]
	blink_led_yellow = 1;
 80010de:	4b16      	ldr	r3, [pc, #88]	; (8001138 <blink_LED_YELLOW+0x64>)
 80010e0:	2201      	movs	r2, #1
 80010e2:	601a      	str	r2, [r3, #0]
	blink_led_green = 0;
 80010e4:	4b15      	ldr	r3, [pc, #84]	; (800113c <blink_LED_YELLOW+0x68>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(YELLOW_GPIO_Port, YELLOW_Pin, 1);
 80010ea:	2201      	movs	r2, #1
 80010ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010f0:	4813      	ldr	r0, [pc, #76]	; (8001140 <blink_LED_YELLOW+0x6c>)
 80010f2:	f000 fc60 	bl	80019b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW_HOR_GPIO_Port, YELLOW_HOR_Pin, 1);
 80010f6:	2201      	movs	r2, #1
 80010f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010fc:	4810      	ldr	r0, [pc, #64]	; (8001140 <blink_LED_YELLOW+0x6c>)
 80010fe:	f000 fc5a 	bl	80019b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(RED_GPIO_Port, RED_Pin, 0);
 8001102:	2200      	movs	r2, #0
 8001104:	2180      	movs	r1, #128	; 0x80
 8001106:	480e      	ldr	r0, [pc, #56]	; (8001140 <blink_LED_YELLOW+0x6c>)
 8001108:	f000 fc55 	bl	80019b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RED_HOR_GPIO_Port, RED_HOR_Pin, 0);
 800110c:	2200      	movs	r2, #0
 800110e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001112:	480b      	ldr	r0, [pc, #44]	; (8001140 <blink_LED_YELLOW+0x6c>)
 8001114:	f000 fc4f 	bl	80019b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_GPIO_Port, GREEN_Pin, 0);
 8001118:	2200      	movs	r2, #0
 800111a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800111e:	4808      	ldr	r0, [pc, #32]	; (8001140 <blink_LED_YELLOW+0x6c>)
 8001120:	f000 fc49 	bl	80019b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_HOR_GPIO_Port, GREEN_HOR_Pin, 0);
 8001124:	2200      	movs	r2, #0
 8001126:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800112a:	4805      	ldr	r0, [pc, #20]	; (8001140 <blink_LED_YELLOW+0x6c>)
 800112c:	f000 fc43 	bl	80019b6 <HAL_GPIO_WritePin>
}
 8001130:	bf00      	nop
 8001132:	bd80      	pop	{r7, pc}
 8001134:	2000009c 	.word	0x2000009c
 8001138:	200000a0 	.word	0x200000a0
 800113c:	200000a4 	.word	0x200000a4
 8001140:	40010800 	.word	0x40010800

08001144 <turn_off_blink_LED_YELLOW>:

void turn_off_blink_LED_YELLOW() {
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(YELLOW_GPIO_Port, YELLOW_Pin, 0);
 8001148:	2200      	movs	r2, #0
 800114a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800114e:	4808      	ldr	r0, [pc, #32]	; (8001170 <turn_off_blink_LED_YELLOW+0x2c>)
 8001150:	f000 fc31 	bl	80019b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW_HOR_GPIO_Port, YELLOW_HOR_Pin, 0);
 8001154:	2200      	movs	r2, #0
 8001156:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800115a:	4805      	ldr	r0, [pc, #20]	; (8001170 <turn_off_blink_LED_YELLOW+0x2c>)
 800115c:	f000 fc2b 	bl	80019b6 <HAL_GPIO_WritePin>
	count = 0;
 8001160:	4b04      	ldr	r3, [pc, #16]	; (8001174 <turn_off_blink_LED_YELLOW+0x30>)
 8001162:	2200      	movs	r2, #0
 8001164:	601a      	str	r2, [r3, #0]
	blink_led_yellow = 0;
 8001166:	4b04      	ldr	r3, [pc, #16]	; (8001178 <turn_off_blink_LED_YELLOW+0x34>)
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
}
 800116c:	bf00      	nop
 800116e:	bd80      	pop	{r7, pc}
 8001170:	40010800 	.word	0x40010800
 8001174:	20000094 	.word	0x20000094
 8001178:	200000a0 	.word	0x200000a0

0800117c <blink_LED_GREEN>:

void blink_LED_GREEN() {
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
	blink_led_red = 0;
 8001180:	4b16      	ldr	r3, [pc, #88]	; (80011dc <blink_LED_GREEN+0x60>)
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
	blink_led_yellow = 0;
 8001186:	4b16      	ldr	r3, [pc, #88]	; (80011e0 <blink_LED_GREEN+0x64>)
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
	blink_led_green = 1;
 800118c:	4b15      	ldr	r3, [pc, #84]	; (80011e4 <blink_LED_GREEN+0x68>)
 800118e:	2201      	movs	r2, #1
 8001190:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(GREEN_GPIO_Port, GREEN_Pin, 1);
 8001192:	2201      	movs	r2, #1
 8001194:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001198:	4813      	ldr	r0, [pc, #76]	; (80011e8 <blink_LED_GREEN+0x6c>)
 800119a:	f000 fc0c 	bl	80019b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_HOR_GPIO_Port, GREEN_HOR_Pin, 1);
 800119e:	2201      	movs	r2, #1
 80011a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011a4:	4810      	ldr	r0, [pc, #64]	; (80011e8 <blink_LED_GREEN+0x6c>)
 80011a6:	f000 fc06 	bl	80019b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(RED_GPIO_Port, RED_Pin, 0);
 80011aa:	2200      	movs	r2, #0
 80011ac:	2180      	movs	r1, #128	; 0x80
 80011ae:	480e      	ldr	r0, [pc, #56]	; (80011e8 <blink_LED_GREEN+0x6c>)
 80011b0:	f000 fc01 	bl	80019b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RED_HOR_GPIO_Port, RED_HOR_Pin, 0);
 80011b4:	2200      	movs	r2, #0
 80011b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011ba:	480b      	ldr	r0, [pc, #44]	; (80011e8 <blink_LED_GREEN+0x6c>)
 80011bc:	f000 fbfb 	bl	80019b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW_GPIO_Port, YELLOW_Pin, 0);
 80011c0:	2200      	movs	r2, #0
 80011c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011c6:	4808      	ldr	r0, [pc, #32]	; (80011e8 <blink_LED_GREEN+0x6c>)
 80011c8:	f000 fbf5 	bl	80019b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW_HOR_GPIO_Port, YELLOW_HOR_Pin, 0);
 80011cc:	2200      	movs	r2, #0
 80011ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011d2:	4805      	ldr	r0, [pc, #20]	; (80011e8 <blink_LED_GREEN+0x6c>)
 80011d4:	f000 fbef 	bl	80019b6 <HAL_GPIO_WritePin>
}
 80011d8:	bf00      	nop
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	2000009c 	.word	0x2000009c
 80011e0:	200000a0 	.word	0x200000a0
 80011e4:	200000a4 	.word	0x200000a4
 80011e8:	40010800 	.word	0x40010800

080011ec <turn_off_blink_LED_GREEN>:

void turn_off_blink_LED_GREEN() {
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GREEN_GPIO_Port, GREEN_Pin, 0);
 80011f0:	2200      	movs	r2, #0
 80011f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011f6:	4808      	ldr	r0, [pc, #32]	; (8001218 <turn_off_blink_LED_GREEN+0x2c>)
 80011f8:	f000 fbdd 	bl	80019b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_HOR_GPIO_Port, GREEN_HOR_Pin, 0);
 80011fc:	2200      	movs	r2, #0
 80011fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001202:	4805      	ldr	r0, [pc, #20]	; (8001218 <turn_off_blink_LED_GREEN+0x2c>)
 8001204:	f000 fbd7 	bl	80019b6 <HAL_GPIO_WritePin>
	count = 0;
 8001208:	4b04      	ldr	r3, [pc, #16]	; (800121c <turn_off_blink_LED_GREEN+0x30>)
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
	blink_led_green = 0;
 800120e:	4b04      	ldr	r3, [pc, #16]	; (8001220 <turn_off_blink_LED_GREEN+0x34>)
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
}
 8001214:	bf00      	nop
 8001216:	bd80      	pop	{r7, pc}
 8001218:	40010800 	.word	0x40010800
 800121c:	20000094 	.word	0x20000094
 8001220:	200000a4 	.word	0x200000a4

08001224 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
	if( htim->Instance == TIM2 ) {
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001234:	d162      	bne.n	80012fc <HAL_TIM_PeriodElapsedCallback+0xd8>

		if(runOnce == 1)
 8001236:	4b33      	ldr	r3, [pc, #204]	; (8001304 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2b01      	cmp	r3, #1
 800123c:	d105      	bne.n	800124a <HAL_TIM_PeriodElapsedCallback+0x26>
		{
			calculateScale(htim);
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f7ff feca 	bl	8000fd8 <calculateScale>
			runOnce = 0;
 8001244:	4b2f      	ldr	r3, [pc, #188]	; (8001304 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
		}

		button_reading();
 800124a:	f7ff fa6d 	bl	8000728 <button_reading>
		button_reading_2();
 800124e:	f7ff fafd 	bl	800084c <button_reading_2>
		button_reading_3();
 8001252:	f7ff fb8d 	bl	8000970 <button_reading_3>

		if(blink_led_red == 1) {
 8001256:	4b2c      	ldr	r3, [pc, #176]	; (8001308 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	2b01      	cmp	r3, #1
 800125c:	d116      	bne.n	800128c <HAL_TIM_PeriodElapsedCallback+0x68>
			if(++count == thescale) {
 800125e:	4b2b      	ldr	r3, [pc, #172]	; (800130c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	3301      	adds	r3, #1
 8001264:	4a29      	ldr	r2, [pc, #164]	; (800130c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001266:	6013      	str	r3, [r2, #0]
 8001268:	4b28      	ldr	r3, [pc, #160]	; (800130c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	4b28      	ldr	r3, [pc, #160]	; (8001310 <HAL_TIM_PeriodElapsedCallback+0xec>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	429a      	cmp	r2, r3
 8001272:	d10b      	bne.n	800128c <HAL_TIM_PeriodElapsedCallback+0x68>
				HAL_GPIO_TogglePin(RED_GPIO_Port, RED_Pin);
 8001274:	2180      	movs	r1, #128	; 0x80
 8001276:	4827      	ldr	r0, [pc, #156]	; (8001314 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001278:	f000 fbb5 	bl	80019e6 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(RED_HOR_GPIO_Port, RED_HOR_Pin);
 800127c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001280:	4824      	ldr	r0, [pc, #144]	; (8001314 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001282:	f000 fbb0 	bl	80019e6 <HAL_GPIO_TogglePin>
				count = 0;
 8001286:	4b21      	ldr	r3, [pc, #132]	; (800130c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
			}
		}

		if(blink_led_yellow == 1) {
 800128c:	4b22      	ldr	r3, [pc, #136]	; (8001318 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2b01      	cmp	r3, #1
 8001292:	d117      	bne.n	80012c4 <HAL_TIM_PeriodElapsedCallback+0xa0>
			if(++count == thescale) {
 8001294:	4b1d      	ldr	r3, [pc, #116]	; (800130c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	3301      	adds	r3, #1
 800129a:	4a1c      	ldr	r2, [pc, #112]	; (800130c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800129c:	6013      	str	r3, [r2, #0]
 800129e:	4b1b      	ldr	r3, [pc, #108]	; (800130c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	4b1b      	ldr	r3, [pc, #108]	; (8001310 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	429a      	cmp	r2, r3
 80012a8:	d10c      	bne.n	80012c4 <HAL_TIM_PeriodElapsedCallback+0xa0>
				HAL_GPIO_TogglePin(YELLOW_GPIO_Port, YELLOW_Pin);
 80012aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012ae:	4819      	ldr	r0, [pc, #100]	; (8001314 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80012b0:	f000 fb99 	bl	80019e6 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(YELLOW_HOR_GPIO_Port, YELLOW_HOR_Pin);
 80012b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012b8:	4816      	ldr	r0, [pc, #88]	; (8001314 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80012ba:	f000 fb94 	bl	80019e6 <HAL_GPIO_TogglePin>
				count = 0;
 80012be:	4b13      	ldr	r3, [pc, #76]	; (800130c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
			}
		}

		if(blink_led_green == 1) {
 80012c4:	4b15      	ldr	r3, [pc, #84]	; (800131c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d117      	bne.n	80012fc <HAL_TIM_PeriodElapsedCallback+0xd8>
			if(++count == thescale) {
 80012cc:	4b0f      	ldr	r3, [pc, #60]	; (800130c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	3301      	adds	r3, #1
 80012d2:	4a0e      	ldr	r2, [pc, #56]	; (800130c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80012d4:	6013      	str	r3, [r2, #0]
 80012d6:	4b0d      	ldr	r3, [pc, #52]	; (800130c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	4b0d      	ldr	r3, [pc, #52]	; (8001310 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	429a      	cmp	r2, r3
 80012e0:	d10c      	bne.n	80012fc <HAL_TIM_PeriodElapsedCallback+0xd8>
				HAL_GPIO_TogglePin(GREEN_GPIO_Port, GREEN_Pin);
 80012e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012e6:	480b      	ldr	r0, [pc, #44]	; (8001314 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80012e8:	f000 fb7d 	bl	80019e6 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(GREEN_HOR_GPIO_Port, GREEN_HOR_Pin);
 80012ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012f0:	4808      	ldr	r0, [pc, #32]	; (8001314 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80012f2:	f000 fb78 	bl	80019e6 <HAL_GPIO_TogglePin>
				count = 0;
 80012f6:	4b05      	ldr	r3, [pc, #20]	; (800130c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
			}
		}

	}

}
 80012fc:	bf00      	nop
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	20000028 	.word	0x20000028
 8001308:	2000009c 	.word	0x2000009c
 800130c:	20000094 	.word	0x20000094
 8001310:	20000098 	.word	0x20000098
 8001314:	40010800 	.word	0x40010800
 8001318:	200000a0 	.word	0x200000a0
 800131c:	200000a4 	.word	0x200000a4

08001320 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001320:	480c      	ldr	r0, [pc, #48]	; (8001354 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001322:	490d      	ldr	r1, [pc, #52]	; (8001358 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001324:	4a0d      	ldr	r2, [pc, #52]	; (800135c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001326:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001328:	e002      	b.n	8001330 <LoopCopyDataInit>

0800132a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800132a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800132c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800132e:	3304      	adds	r3, #4

08001330 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001330:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001332:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001334:	d3f9      	bcc.n	800132a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001336:	4a0a      	ldr	r2, [pc, #40]	; (8001360 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001338:	4c0a      	ldr	r4, [pc, #40]	; (8001364 <LoopFillZerobss+0x22>)
  movs r3, #0
 800133a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800133c:	e001      	b.n	8001342 <LoopFillZerobss>

0800133e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800133e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001340:	3204      	adds	r2, #4

08001342 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001342:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001344:	d3fb      	bcc.n	800133e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001346:	f7ff fe41 	bl	8000fcc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800134a:	f001 fb31 	bl	80029b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800134e:	f7ff fcb3 	bl	8000cb8 <main>
  bx lr
 8001352:	4770      	bx	lr
  ldr r0, =_sdata
 8001354:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001358:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 800135c:	08002a48 	.word	0x08002a48
  ldr r2, =_sbss
 8001360:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 8001364:	200000f4 	.word	0x200000f4

08001368 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001368:	e7fe      	b.n	8001368 <ADC1_2_IRQHandler>
	...

0800136c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001370:	4b08      	ldr	r3, [pc, #32]	; (8001394 <HAL_Init+0x28>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a07      	ldr	r2, [pc, #28]	; (8001394 <HAL_Init+0x28>)
 8001376:	f043 0310 	orr.w	r3, r3, #16
 800137a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800137c:	2003      	movs	r0, #3
 800137e:	f000 f947 	bl	8001610 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001382:	200f      	movs	r0, #15
 8001384:	f000 f808 	bl	8001398 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001388:	f7ff fd98 	bl	8000ebc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800138c:	2300      	movs	r3, #0
}
 800138e:	4618      	mov	r0, r3
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40022000 	.word	0x40022000

08001398 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013a0:	4b12      	ldr	r3, [pc, #72]	; (80013ec <HAL_InitTick+0x54>)
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	4b12      	ldr	r3, [pc, #72]	; (80013f0 <HAL_InitTick+0x58>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	4619      	mov	r1, r3
 80013aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80013b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013b6:	4618      	mov	r0, r3
 80013b8:	f000 f95f 	bl	800167a <HAL_SYSTICK_Config>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e00e      	b.n	80013e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2b0f      	cmp	r3, #15
 80013ca:	d80a      	bhi.n	80013e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013cc:	2200      	movs	r2, #0
 80013ce:	6879      	ldr	r1, [r7, #4]
 80013d0:	f04f 30ff 	mov.w	r0, #4294967295
 80013d4:	f000 f927 	bl	8001626 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013d8:	4a06      	ldr	r2, [pc, #24]	; (80013f4 <HAL_InitTick+0x5c>)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013de:	2300      	movs	r3, #0
 80013e0:	e000      	b.n	80013e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	20000024 	.word	0x20000024
 80013f0:	20000030 	.word	0x20000030
 80013f4:	2000002c 	.word	0x2000002c

080013f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013fc:	4b05      	ldr	r3, [pc, #20]	; (8001414 <HAL_IncTick+0x1c>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	461a      	mov	r2, r3
 8001402:	4b05      	ldr	r3, [pc, #20]	; (8001418 <HAL_IncTick+0x20>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4413      	add	r3, r2
 8001408:	4a03      	ldr	r2, [pc, #12]	; (8001418 <HAL_IncTick+0x20>)
 800140a:	6013      	str	r3, [r2, #0]
}
 800140c:	bf00      	nop
 800140e:	46bd      	mov	sp, r7
 8001410:	bc80      	pop	{r7}
 8001412:	4770      	bx	lr
 8001414:	20000030 	.word	0x20000030
 8001418:	200000f0 	.word	0x200000f0

0800141c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  return uwTick;
 8001420:	4b02      	ldr	r3, [pc, #8]	; (800142c <HAL_GetTick+0x10>)
 8001422:	681b      	ldr	r3, [r3, #0]
}
 8001424:	4618      	mov	r0, r3
 8001426:	46bd      	mov	sp, r7
 8001428:	bc80      	pop	{r7}
 800142a:	4770      	bx	lr
 800142c:	200000f0 	.word	0x200000f0

08001430 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001438:	f7ff fff0 	bl	800141c <HAL_GetTick>
 800143c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001448:	d005      	beq.n	8001456 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800144a:	4b0a      	ldr	r3, [pc, #40]	; (8001474 <HAL_Delay+0x44>)
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	461a      	mov	r2, r3
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	4413      	add	r3, r2
 8001454:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001456:	bf00      	nop
 8001458:	f7ff ffe0 	bl	800141c <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	68fa      	ldr	r2, [r7, #12]
 8001464:	429a      	cmp	r2, r3
 8001466:	d8f7      	bhi.n	8001458 <HAL_Delay+0x28>
  {
  }
}
 8001468:	bf00      	nop
 800146a:	bf00      	nop
 800146c:	3710      	adds	r7, #16
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	20000030 	.word	0x20000030

08001478 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001478:	b480      	push	{r7}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f003 0307 	and.w	r3, r3, #7
 8001486:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001488:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <__NVIC_SetPriorityGrouping+0x44>)
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800148e:	68ba      	ldr	r2, [r7, #8]
 8001490:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001494:	4013      	ands	r3, r2
 8001496:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014aa:	4a04      	ldr	r2, [pc, #16]	; (80014bc <__NVIC_SetPriorityGrouping+0x44>)
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	60d3      	str	r3, [r2, #12]
}
 80014b0:	bf00      	nop
 80014b2:	3714      	adds	r7, #20
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bc80      	pop	{r7}
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	e000ed00 	.word	0xe000ed00

080014c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014c4:	4b04      	ldr	r3, [pc, #16]	; (80014d8 <__NVIC_GetPriorityGrouping+0x18>)
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	0a1b      	lsrs	r3, r3, #8
 80014ca:	f003 0307 	and.w	r3, r3, #7
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bc80      	pop	{r7}
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	e000ed00 	.word	0xe000ed00

080014dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	4603      	mov	r3, r0
 80014e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	db0b      	blt.n	8001506 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014ee:	79fb      	ldrb	r3, [r7, #7]
 80014f0:	f003 021f 	and.w	r2, r3, #31
 80014f4:	4906      	ldr	r1, [pc, #24]	; (8001510 <__NVIC_EnableIRQ+0x34>)
 80014f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fa:	095b      	lsrs	r3, r3, #5
 80014fc:	2001      	movs	r0, #1
 80014fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001506:	bf00      	nop
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	bc80      	pop	{r7}
 800150e:	4770      	bx	lr
 8001510:	e000e100 	.word	0xe000e100

08001514 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	6039      	str	r1, [r7, #0]
 800151e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001520:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001524:	2b00      	cmp	r3, #0
 8001526:	db0a      	blt.n	800153e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	b2da      	uxtb	r2, r3
 800152c:	490c      	ldr	r1, [pc, #48]	; (8001560 <__NVIC_SetPriority+0x4c>)
 800152e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001532:	0112      	lsls	r2, r2, #4
 8001534:	b2d2      	uxtb	r2, r2
 8001536:	440b      	add	r3, r1
 8001538:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800153c:	e00a      	b.n	8001554 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	b2da      	uxtb	r2, r3
 8001542:	4908      	ldr	r1, [pc, #32]	; (8001564 <__NVIC_SetPriority+0x50>)
 8001544:	79fb      	ldrb	r3, [r7, #7]
 8001546:	f003 030f 	and.w	r3, r3, #15
 800154a:	3b04      	subs	r3, #4
 800154c:	0112      	lsls	r2, r2, #4
 800154e:	b2d2      	uxtb	r2, r2
 8001550:	440b      	add	r3, r1
 8001552:	761a      	strb	r2, [r3, #24]
}
 8001554:	bf00      	nop
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	bc80      	pop	{r7}
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	e000e100 	.word	0xe000e100
 8001564:	e000ed00 	.word	0xe000ed00

08001568 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001568:	b480      	push	{r7}
 800156a:	b089      	sub	sp, #36	; 0x24
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	f003 0307 	and.w	r3, r3, #7
 800157a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	f1c3 0307 	rsb	r3, r3, #7
 8001582:	2b04      	cmp	r3, #4
 8001584:	bf28      	it	cs
 8001586:	2304      	movcs	r3, #4
 8001588:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	3304      	adds	r3, #4
 800158e:	2b06      	cmp	r3, #6
 8001590:	d902      	bls.n	8001598 <NVIC_EncodePriority+0x30>
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	3b03      	subs	r3, #3
 8001596:	e000      	b.n	800159a <NVIC_EncodePriority+0x32>
 8001598:	2300      	movs	r3, #0
 800159a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800159c:	f04f 32ff 	mov.w	r2, #4294967295
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	43da      	mvns	r2, r3
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	401a      	ands	r2, r3
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015b0:	f04f 31ff 	mov.w	r1, #4294967295
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	fa01 f303 	lsl.w	r3, r1, r3
 80015ba:	43d9      	mvns	r1, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c0:	4313      	orrs	r3, r2
         );
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3724      	adds	r7, #36	; 0x24
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bc80      	pop	{r7}
 80015ca:	4770      	bx	lr

080015cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	3b01      	subs	r3, #1
 80015d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015dc:	d301      	bcc.n	80015e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015de:	2301      	movs	r3, #1
 80015e0:	e00f      	b.n	8001602 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015e2:	4a0a      	ldr	r2, [pc, #40]	; (800160c <SysTick_Config+0x40>)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	3b01      	subs	r3, #1
 80015e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015ea:	210f      	movs	r1, #15
 80015ec:	f04f 30ff 	mov.w	r0, #4294967295
 80015f0:	f7ff ff90 	bl	8001514 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015f4:	4b05      	ldr	r3, [pc, #20]	; (800160c <SysTick_Config+0x40>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015fa:	4b04      	ldr	r3, [pc, #16]	; (800160c <SysTick_Config+0x40>)
 80015fc:	2207      	movs	r2, #7
 80015fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001600:	2300      	movs	r3, #0
}
 8001602:	4618      	mov	r0, r3
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	e000e010 	.word	0xe000e010

08001610 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f7ff ff2d 	bl	8001478 <__NVIC_SetPriorityGrouping>
}
 800161e:	bf00      	nop
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001626:	b580      	push	{r7, lr}
 8001628:	b086      	sub	sp, #24
 800162a:	af00      	add	r7, sp, #0
 800162c:	4603      	mov	r3, r0
 800162e:	60b9      	str	r1, [r7, #8]
 8001630:	607a      	str	r2, [r7, #4]
 8001632:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001634:	2300      	movs	r3, #0
 8001636:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001638:	f7ff ff42 	bl	80014c0 <__NVIC_GetPriorityGrouping>
 800163c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	68b9      	ldr	r1, [r7, #8]
 8001642:	6978      	ldr	r0, [r7, #20]
 8001644:	f7ff ff90 	bl	8001568 <NVIC_EncodePriority>
 8001648:	4602      	mov	r2, r0
 800164a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800164e:	4611      	mov	r1, r2
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff ff5f 	bl	8001514 <__NVIC_SetPriority>
}
 8001656:	bf00      	nop
 8001658:	3718      	adds	r7, #24
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}

0800165e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800165e:	b580      	push	{r7, lr}
 8001660:	b082      	sub	sp, #8
 8001662:	af00      	add	r7, sp, #0
 8001664:	4603      	mov	r3, r0
 8001666:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001668:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff ff35 	bl	80014dc <__NVIC_EnableIRQ>
}
 8001672:	bf00      	nop
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}

0800167a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800167a:	b580      	push	{r7, lr}
 800167c:	b082      	sub	sp, #8
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f7ff ffa2 	bl	80015cc <SysTick_Config>
 8001688:	4603      	mov	r3, r0
}
 800168a:	4618      	mov	r0, r3
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
	...

08001694 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001694:	b480      	push	{r7}
 8001696:	b08b      	sub	sp, #44	; 0x2c
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800169e:	2300      	movs	r3, #0
 80016a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016a2:	2300      	movs	r3, #0
 80016a4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016a6:	e148      	b.n	800193a <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80016a8:	2201      	movs	r2, #1
 80016aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ac:	fa02 f303 	lsl.w	r3, r2, r3
 80016b0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	69fa      	ldr	r2, [r7, #28]
 80016b8:	4013      	ands	r3, r2
 80016ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	f040 8137 	bne.w	8001934 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	4aa3      	ldr	r2, [pc, #652]	; (8001958 <HAL_GPIO_Init+0x2c4>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d05e      	beq.n	800178e <HAL_GPIO_Init+0xfa>
 80016d0:	4aa1      	ldr	r2, [pc, #644]	; (8001958 <HAL_GPIO_Init+0x2c4>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d875      	bhi.n	80017c2 <HAL_GPIO_Init+0x12e>
 80016d6:	4aa1      	ldr	r2, [pc, #644]	; (800195c <HAL_GPIO_Init+0x2c8>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d058      	beq.n	800178e <HAL_GPIO_Init+0xfa>
 80016dc:	4a9f      	ldr	r2, [pc, #636]	; (800195c <HAL_GPIO_Init+0x2c8>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d86f      	bhi.n	80017c2 <HAL_GPIO_Init+0x12e>
 80016e2:	4a9f      	ldr	r2, [pc, #636]	; (8001960 <HAL_GPIO_Init+0x2cc>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d052      	beq.n	800178e <HAL_GPIO_Init+0xfa>
 80016e8:	4a9d      	ldr	r2, [pc, #628]	; (8001960 <HAL_GPIO_Init+0x2cc>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d869      	bhi.n	80017c2 <HAL_GPIO_Init+0x12e>
 80016ee:	4a9d      	ldr	r2, [pc, #628]	; (8001964 <HAL_GPIO_Init+0x2d0>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d04c      	beq.n	800178e <HAL_GPIO_Init+0xfa>
 80016f4:	4a9b      	ldr	r2, [pc, #620]	; (8001964 <HAL_GPIO_Init+0x2d0>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d863      	bhi.n	80017c2 <HAL_GPIO_Init+0x12e>
 80016fa:	4a9b      	ldr	r2, [pc, #620]	; (8001968 <HAL_GPIO_Init+0x2d4>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d046      	beq.n	800178e <HAL_GPIO_Init+0xfa>
 8001700:	4a99      	ldr	r2, [pc, #612]	; (8001968 <HAL_GPIO_Init+0x2d4>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d85d      	bhi.n	80017c2 <HAL_GPIO_Init+0x12e>
 8001706:	2b12      	cmp	r3, #18
 8001708:	d82a      	bhi.n	8001760 <HAL_GPIO_Init+0xcc>
 800170a:	2b12      	cmp	r3, #18
 800170c:	d859      	bhi.n	80017c2 <HAL_GPIO_Init+0x12e>
 800170e:	a201      	add	r2, pc, #4	; (adr r2, 8001714 <HAL_GPIO_Init+0x80>)
 8001710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001714:	0800178f 	.word	0x0800178f
 8001718:	08001769 	.word	0x08001769
 800171c:	0800177b 	.word	0x0800177b
 8001720:	080017bd 	.word	0x080017bd
 8001724:	080017c3 	.word	0x080017c3
 8001728:	080017c3 	.word	0x080017c3
 800172c:	080017c3 	.word	0x080017c3
 8001730:	080017c3 	.word	0x080017c3
 8001734:	080017c3 	.word	0x080017c3
 8001738:	080017c3 	.word	0x080017c3
 800173c:	080017c3 	.word	0x080017c3
 8001740:	080017c3 	.word	0x080017c3
 8001744:	080017c3 	.word	0x080017c3
 8001748:	080017c3 	.word	0x080017c3
 800174c:	080017c3 	.word	0x080017c3
 8001750:	080017c3 	.word	0x080017c3
 8001754:	080017c3 	.word	0x080017c3
 8001758:	08001771 	.word	0x08001771
 800175c:	08001785 	.word	0x08001785
 8001760:	4a82      	ldr	r2, [pc, #520]	; (800196c <HAL_GPIO_Init+0x2d8>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d013      	beq.n	800178e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001766:	e02c      	b.n	80017c2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	623b      	str	r3, [r7, #32]
          break;
 800176e:	e029      	b.n	80017c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	3304      	adds	r3, #4
 8001776:	623b      	str	r3, [r7, #32]
          break;
 8001778:	e024      	b.n	80017c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	68db      	ldr	r3, [r3, #12]
 800177e:	3308      	adds	r3, #8
 8001780:	623b      	str	r3, [r7, #32]
          break;
 8001782:	e01f      	b.n	80017c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	330c      	adds	r3, #12
 800178a:	623b      	str	r3, [r7, #32]
          break;
 800178c:	e01a      	b.n	80017c4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d102      	bne.n	800179c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001796:	2304      	movs	r3, #4
 8001798:	623b      	str	r3, [r7, #32]
          break;
 800179a:	e013      	b.n	80017c4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d105      	bne.n	80017b0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017a4:	2308      	movs	r3, #8
 80017a6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	69fa      	ldr	r2, [r7, #28]
 80017ac:	611a      	str	r2, [r3, #16]
          break;
 80017ae:	e009      	b.n	80017c4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017b0:	2308      	movs	r3, #8
 80017b2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	69fa      	ldr	r2, [r7, #28]
 80017b8:	615a      	str	r2, [r3, #20]
          break;
 80017ba:	e003      	b.n	80017c4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017bc:	2300      	movs	r3, #0
 80017be:	623b      	str	r3, [r7, #32]
          break;
 80017c0:	e000      	b.n	80017c4 <HAL_GPIO_Init+0x130>
          break;
 80017c2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	2bff      	cmp	r3, #255	; 0xff
 80017c8:	d801      	bhi.n	80017ce <HAL_GPIO_Init+0x13a>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	e001      	b.n	80017d2 <HAL_GPIO_Init+0x13e>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	3304      	adds	r3, #4
 80017d2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	2bff      	cmp	r3, #255	; 0xff
 80017d8:	d802      	bhi.n	80017e0 <HAL_GPIO_Init+0x14c>
 80017da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	e002      	b.n	80017e6 <HAL_GPIO_Init+0x152>
 80017e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e2:	3b08      	subs	r3, #8
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	210f      	movs	r1, #15
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	fa01 f303 	lsl.w	r3, r1, r3
 80017f4:	43db      	mvns	r3, r3
 80017f6:	401a      	ands	r2, r3
 80017f8:	6a39      	ldr	r1, [r7, #32]
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001800:	431a      	orrs	r2, r3
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800180e:	2b00      	cmp	r3, #0
 8001810:	f000 8090 	beq.w	8001934 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001814:	4b56      	ldr	r3, [pc, #344]	; (8001970 <HAL_GPIO_Init+0x2dc>)
 8001816:	699b      	ldr	r3, [r3, #24]
 8001818:	4a55      	ldr	r2, [pc, #340]	; (8001970 <HAL_GPIO_Init+0x2dc>)
 800181a:	f043 0301 	orr.w	r3, r3, #1
 800181e:	6193      	str	r3, [r2, #24]
 8001820:	4b53      	ldr	r3, [pc, #332]	; (8001970 <HAL_GPIO_Init+0x2dc>)
 8001822:	699b      	ldr	r3, [r3, #24]
 8001824:	f003 0301 	and.w	r3, r3, #1
 8001828:	60bb      	str	r3, [r7, #8]
 800182a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800182c:	4a51      	ldr	r2, [pc, #324]	; (8001974 <HAL_GPIO_Init+0x2e0>)
 800182e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001830:	089b      	lsrs	r3, r3, #2
 8001832:	3302      	adds	r3, #2
 8001834:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001838:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800183a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183c:	f003 0303 	and.w	r3, r3, #3
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	220f      	movs	r2, #15
 8001844:	fa02 f303 	lsl.w	r3, r2, r3
 8001848:	43db      	mvns	r3, r3
 800184a:	68fa      	ldr	r2, [r7, #12]
 800184c:	4013      	ands	r3, r2
 800184e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	4a49      	ldr	r2, [pc, #292]	; (8001978 <HAL_GPIO_Init+0x2e4>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d00d      	beq.n	8001874 <HAL_GPIO_Init+0x1e0>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	4a48      	ldr	r2, [pc, #288]	; (800197c <HAL_GPIO_Init+0x2e8>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d007      	beq.n	8001870 <HAL_GPIO_Init+0x1dc>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	4a47      	ldr	r2, [pc, #284]	; (8001980 <HAL_GPIO_Init+0x2ec>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d101      	bne.n	800186c <HAL_GPIO_Init+0x1d8>
 8001868:	2302      	movs	r3, #2
 800186a:	e004      	b.n	8001876 <HAL_GPIO_Init+0x1e2>
 800186c:	2303      	movs	r3, #3
 800186e:	e002      	b.n	8001876 <HAL_GPIO_Init+0x1e2>
 8001870:	2301      	movs	r3, #1
 8001872:	e000      	b.n	8001876 <HAL_GPIO_Init+0x1e2>
 8001874:	2300      	movs	r3, #0
 8001876:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001878:	f002 0203 	and.w	r2, r2, #3
 800187c:	0092      	lsls	r2, r2, #2
 800187e:	4093      	lsls	r3, r2
 8001880:	68fa      	ldr	r2, [r7, #12]
 8001882:	4313      	orrs	r3, r2
 8001884:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001886:	493b      	ldr	r1, [pc, #236]	; (8001974 <HAL_GPIO_Init+0x2e0>)
 8001888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188a:	089b      	lsrs	r3, r3, #2
 800188c:	3302      	adds	r3, #2
 800188e:	68fa      	ldr	r2, [r7, #12]
 8001890:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800189c:	2b00      	cmp	r3, #0
 800189e:	d006      	beq.n	80018ae <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80018a0:	4b38      	ldr	r3, [pc, #224]	; (8001984 <HAL_GPIO_Init+0x2f0>)
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	4937      	ldr	r1, [pc, #220]	; (8001984 <HAL_GPIO_Init+0x2f0>)
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	600b      	str	r3, [r1, #0]
 80018ac:	e006      	b.n	80018bc <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80018ae:	4b35      	ldr	r3, [pc, #212]	; (8001984 <HAL_GPIO_Init+0x2f0>)
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	69bb      	ldr	r3, [r7, #24]
 80018b4:	43db      	mvns	r3, r3
 80018b6:	4933      	ldr	r1, [pc, #204]	; (8001984 <HAL_GPIO_Init+0x2f0>)
 80018b8:	4013      	ands	r3, r2
 80018ba:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d006      	beq.n	80018d6 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018c8:	4b2e      	ldr	r3, [pc, #184]	; (8001984 <HAL_GPIO_Init+0x2f0>)
 80018ca:	685a      	ldr	r2, [r3, #4]
 80018cc:	492d      	ldr	r1, [pc, #180]	; (8001984 <HAL_GPIO_Init+0x2f0>)
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	604b      	str	r3, [r1, #4]
 80018d4:	e006      	b.n	80018e4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018d6:	4b2b      	ldr	r3, [pc, #172]	; (8001984 <HAL_GPIO_Init+0x2f0>)
 80018d8:	685a      	ldr	r2, [r3, #4]
 80018da:	69bb      	ldr	r3, [r7, #24]
 80018dc:	43db      	mvns	r3, r3
 80018de:	4929      	ldr	r1, [pc, #164]	; (8001984 <HAL_GPIO_Init+0x2f0>)
 80018e0:	4013      	ands	r3, r2
 80018e2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d006      	beq.n	80018fe <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018f0:	4b24      	ldr	r3, [pc, #144]	; (8001984 <HAL_GPIO_Init+0x2f0>)
 80018f2:	689a      	ldr	r2, [r3, #8]
 80018f4:	4923      	ldr	r1, [pc, #140]	; (8001984 <HAL_GPIO_Init+0x2f0>)
 80018f6:	69bb      	ldr	r3, [r7, #24]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	608b      	str	r3, [r1, #8]
 80018fc:	e006      	b.n	800190c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018fe:	4b21      	ldr	r3, [pc, #132]	; (8001984 <HAL_GPIO_Init+0x2f0>)
 8001900:	689a      	ldr	r2, [r3, #8]
 8001902:	69bb      	ldr	r3, [r7, #24]
 8001904:	43db      	mvns	r3, r3
 8001906:	491f      	ldr	r1, [pc, #124]	; (8001984 <HAL_GPIO_Init+0x2f0>)
 8001908:	4013      	ands	r3, r2
 800190a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001914:	2b00      	cmp	r3, #0
 8001916:	d006      	beq.n	8001926 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001918:	4b1a      	ldr	r3, [pc, #104]	; (8001984 <HAL_GPIO_Init+0x2f0>)
 800191a:	68da      	ldr	r2, [r3, #12]
 800191c:	4919      	ldr	r1, [pc, #100]	; (8001984 <HAL_GPIO_Init+0x2f0>)
 800191e:	69bb      	ldr	r3, [r7, #24]
 8001920:	4313      	orrs	r3, r2
 8001922:	60cb      	str	r3, [r1, #12]
 8001924:	e006      	b.n	8001934 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001926:	4b17      	ldr	r3, [pc, #92]	; (8001984 <HAL_GPIO_Init+0x2f0>)
 8001928:	68da      	ldr	r2, [r3, #12]
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	43db      	mvns	r3, r3
 800192e:	4915      	ldr	r1, [pc, #84]	; (8001984 <HAL_GPIO_Init+0x2f0>)
 8001930:	4013      	ands	r3, r2
 8001932:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001936:	3301      	adds	r3, #1
 8001938:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001940:	fa22 f303 	lsr.w	r3, r2, r3
 8001944:	2b00      	cmp	r3, #0
 8001946:	f47f aeaf 	bne.w	80016a8 <HAL_GPIO_Init+0x14>
  }
}
 800194a:	bf00      	nop
 800194c:	bf00      	nop
 800194e:	372c      	adds	r7, #44	; 0x2c
 8001950:	46bd      	mov	sp, r7
 8001952:	bc80      	pop	{r7}
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	10320000 	.word	0x10320000
 800195c:	10310000 	.word	0x10310000
 8001960:	10220000 	.word	0x10220000
 8001964:	10210000 	.word	0x10210000
 8001968:	10120000 	.word	0x10120000
 800196c:	10110000 	.word	0x10110000
 8001970:	40021000 	.word	0x40021000
 8001974:	40010000 	.word	0x40010000
 8001978:	40010800 	.word	0x40010800
 800197c:	40010c00 	.word	0x40010c00
 8001980:	40011000 	.word	0x40011000
 8001984:	40010400 	.word	0x40010400

08001988 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	460b      	mov	r3, r1
 8001992:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	689a      	ldr	r2, [r3, #8]
 8001998:	887b      	ldrh	r3, [r7, #2]
 800199a:	4013      	ands	r3, r2
 800199c:	2b00      	cmp	r3, #0
 800199e:	d002      	beq.n	80019a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80019a0:	2301      	movs	r3, #1
 80019a2:	73fb      	strb	r3, [r7, #15]
 80019a4:	e001      	b.n	80019aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80019a6:	2300      	movs	r3, #0
 80019a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80019aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3714      	adds	r7, #20
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bc80      	pop	{r7}
 80019b4:	4770      	bx	lr

080019b6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019b6:	b480      	push	{r7}
 80019b8:	b083      	sub	sp, #12
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
 80019be:	460b      	mov	r3, r1
 80019c0:	807b      	strh	r3, [r7, #2]
 80019c2:	4613      	mov	r3, r2
 80019c4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019c6:	787b      	ldrb	r3, [r7, #1]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d003      	beq.n	80019d4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019cc:	887a      	ldrh	r2, [r7, #2]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80019d2:	e003      	b.n	80019dc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019d4:	887b      	ldrh	r3, [r7, #2]
 80019d6:	041a      	lsls	r2, r3, #16
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	611a      	str	r2, [r3, #16]
}
 80019dc:	bf00      	nop
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bc80      	pop	{r7}
 80019e4:	4770      	bx	lr

080019e6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019e6:	b480      	push	{r7}
 80019e8:	b085      	sub	sp, #20
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
 80019ee:	460b      	mov	r3, r1
 80019f0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	68db      	ldr	r3, [r3, #12]
 80019f6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80019f8:	887a      	ldrh	r2, [r7, #2]
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	4013      	ands	r3, r2
 80019fe:	041a      	lsls	r2, r3, #16
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	43d9      	mvns	r1, r3
 8001a04:	887b      	ldrh	r3, [r7, #2]
 8001a06:	400b      	ands	r3, r1
 8001a08:	431a      	orrs	r2, r3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	611a      	str	r2, [r3, #16]
}
 8001a0e:	bf00      	nop
 8001a10:	3714      	adds	r7, #20
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bc80      	pop	{r7}
 8001a16:	4770      	bx	lr

08001a18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b086      	sub	sp, #24
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d101      	bne.n	8001a2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e26c      	b.n	8001f04 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	f000 8087 	beq.w	8001b46 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a38:	4b92      	ldr	r3, [pc, #584]	; (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f003 030c 	and.w	r3, r3, #12
 8001a40:	2b04      	cmp	r3, #4
 8001a42:	d00c      	beq.n	8001a5e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a44:	4b8f      	ldr	r3, [pc, #572]	; (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f003 030c 	and.w	r3, r3, #12
 8001a4c:	2b08      	cmp	r3, #8
 8001a4e:	d112      	bne.n	8001a76 <HAL_RCC_OscConfig+0x5e>
 8001a50:	4b8c      	ldr	r3, [pc, #560]	; (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a5c:	d10b      	bne.n	8001a76 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a5e:	4b89      	ldr	r3, [pc, #548]	; (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d06c      	beq.n	8001b44 <HAL_RCC_OscConfig+0x12c>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d168      	bne.n	8001b44 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e246      	b.n	8001f04 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a7e:	d106      	bne.n	8001a8e <HAL_RCC_OscConfig+0x76>
 8001a80:	4b80      	ldr	r3, [pc, #512]	; (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a7f      	ldr	r2, [pc, #508]	; (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001a86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a8a:	6013      	str	r3, [r2, #0]
 8001a8c:	e02e      	b.n	8001aec <HAL_RCC_OscConfig+0xd4>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d10c      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x98>
 8001a96:	4b7b      	ldr	r3, [pc, #492]	; (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a7a      	ldr	r2, [pc, #488]	; (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001a9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aa0:	6013      	str	r3, [r2, #0]
 8001aa2:	4b78      	ldr	r3, [pc, #480]	; (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a77      	ldr	r2, [pc, #476]	; (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001aa8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001aac:	6013      	str	r3, [r2, #0]
 8001aae:	e01d      	b.n	8001aec <HAL_RCC_OscConfig+0xd4>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ab8:	d10c      	bne.n	8001ad4 <HAL_RCC_OscConfig+0xbc>
 8001aba:	4b72      	ldr	r3, [pc, #456]	; (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a71      	ldr	r2, [pc, #452]	; (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001ac0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ac4:	6013      	str	r3, [r2, #0]
 8001ac6:	4b6f      	ldr	r3, [pc, #444]	; (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a6e      	ldr	r2, [pc, #440]	; (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001acc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ad0:	6013      	str	r3, [r2, #0]
 8001ad2:	e00b      	b.n	8001aec <HAL_RCC_OscConfig+0xd4>
 8001ad4:	4b6b      	ldr	r3, [pc, #428]	; (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a6a      	ldr	r2, [pc, #424]	; (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001ada:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ade:	6013      	str	r3, [r2, #0]
 8001ae0:	4b68      	ldr	r3, [pc, #416]	; (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a67      	ldr	r2, [pc, #412]	; (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001ae6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001aea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d013      	beq.n	8001b1c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af4:	f7ff fc92 	bl	800141c <HAL_GetTick>
 8001af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001afa:	e008      	b.n	8001b0e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001afc:	f7ff fc8e 	bl	800141c <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	2b64      	cmp	r3, #100	; 0x64
 8001b08:	d901      	bls.n	8001b0e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e1fa      	b.n	8001f04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b0e:	4b5d      	ldr	r3, [pc, #372]	; (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d0f0      	beq.n	8001afc <HAL_RCC_OscConfig+0xe4>
 8001b1a:	e014      	b.n	8001b46 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b1c:	f7ff fc7e 	bl	800141c <HAL_GetTick>
 8001b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b22:	e008      	b.n	8001b36 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b24:	f7ff fc7a 	bl	800141c <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b64      	cmp	r3, #100	; 0x64
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e1e6      	b.n	8001f04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b36:	4b53      	ldr	r3, [pc, #332]	; (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d1f0      	bne.n	8001b24 <HAL_RCC_OscConfig+0x10c>
 8001b42:	e000      	b.n	8001b46 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d063      	beq.n	8001c1a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b52:	4b4c      	ldr	r3, [pc, #304]	; (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f003 030c 	and.w	r3, r3, #12
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d00b      	beq.n	8001b76 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b5e:	4b49      	ldr	r3, [pc, #292]	; (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f003 030c 	and.w	r3, r3, #12
 8001b66:	2b08      	cmp	r3, #8
 8001b68:	d11c      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x18c>
 8001b6a:	4b46      	ldr	r3, [pc, #280]	; (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d116      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b76:	4b43      	ldr	r3, [pc, #268]	; (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d005      	beq.n	8001b8e <HAL_RCC_OscConfig+0x176>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	691b      	ldr	r3, [r3, #16]
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d001      	beq.n	8001b8e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e1ba      	b.n	8001f04 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b8e:	4b3d      	ldr	r3, [pc, #244]	; (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	695b      	ldr	r3, [r3, #20]
 8001b9a:	00db      	lsls	r3, r3, #3
 8001b9c:	4939      	ldr	r1, [pc, #228]	; (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ba2:	e03a      	b.n	8001c1a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	691b      	ldr	r3, [r3, #16]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d020      	beq.n	8001bee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bac:	4b36      	ldr	r3, [pc, #216]	; (8001c88 <HAL_RCC_OscConfig+0x270>)
 8001bae:	2201      	movs	r2, #1
 8001bb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb2:	f7ff fc33 	bl	800141c <HAL_GetTick>
 8001bb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bb8:	e008      	b.n	8001bcc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bba:	f7ff fc2f 	bl	800141c <HAL_GetTick>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d901      	bls.n	8001bcc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	e19b      	b.n	8001f04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bcc:	4b2d      	ldr	r3, [pc, #180]	; (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0302 	and.w	r3, r3, #2
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d0f0      	beq.n	8001bba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bd8:	4b2a      	ldr	r3, [pc, #168]	; (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	695b      	ldr	r3, [r3, #20]
 8001be4:	00db      	lsls	r3, r3, #3
 8001be6:	4927      	ldr	r1, [pc, #156]	; (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001be8:	4313      	orrs	r3, r2
 8001bea:	600b      	str	r3, [r1, #0]
 8001bec:	e015      	b.n	8001c1a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bee:	4b26      	ldr	r3, [pc, #152]	; (8001c88 <HAL_RCC_OscConfig+0x270>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf4:	f7ff fc12 	bl	800141c <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bfa:	e008      	b.n	8001c0e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bfc:	f7ff fc0e 	bl	800141c <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e17a      	b.n	8001f04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c0e:	4b1d      	ldr	r3, [pc, #116]	; (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d1f0      	bne.n	8001bfc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0308 	and.w	r3, r3, #8
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d03a      	beq.n	8001c9c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	699b      	ldr	r3, [r3, #24]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d019      	beq.n	8001c62 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c2e:	4b17      	ldr	r3, [pc, #92]	; (8001c8c <HAL_RCC_OscConfig+0x274>)
 8001c30:	2201      	movs	r2, #1
 8001c32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c34:	f7ff fbf2 	bl	800141c <HAL_GetTick>
 8001c38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c3a:	e008      	b.n	8001c4e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c3c:	f7ff fbee 	bl	800141c <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e15a      	b.n	8001f04 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c4e:	4b0d      	ldr	r3, [pc, #52]	; (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d0f0      	beq.n	8001c3c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c5a:	2001      	movs	r0, #1
 8001c5c:	f000 faa6 	bl	80021ac <RCC_Delay>
 8001c60:	e01c      	b.n	8001c9c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c62:	4b0a      	ldr	r3, [pc, #40]	; (8001c8c <HAL_RCC_OscConfig+0x274>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c68:	f7ff fbd8 	bl	800141c <HAL_GetTick>
 8001c6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c6e:	e00f      	b.n	8001c90 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c70:	f7ff fbd4 	bl	800141c <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d908      	bls.n	8001c90 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e140      	b.n	8001f04 <HAL_RCC_OscConfig+0x4ec>
 8001c82:	bf00      	nop
 8001c84:	40021000 	.word	0x40021000
 8001c88:	42420000 	.word	0x42420000
 8001c8c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c90:	4b9e      	ldr	r3, [pc, #632]	; (8001f0c <HAL_RCC_OscConfig+0x4f4>)
 8001c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c94:	f003 0302 	and.w	r3, r3, #2
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d1e9      	bne.n	8001c70 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0304 	and.w	r3, r3, #4
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	f000 80a6 	beq.w	8001df6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001caa:	2300      	movs	r3, #0
 8001cac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cae:	4b97      	ldr	r3, [pc, #604]	; (8001f0c <HAL_RCC_OscConfig+0x4f4>)
 8001cb0:	69db      	ldr	r3, [r3, #28]
 8001cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d10d      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cba:	4b94      	ldr	r3, [pc, #592]	; (8001f0c <HAL_RCC_OscConfig+0x4f4>)
 8001cbc:	69db      	ldr	r3, [r3, #28]
 8001cbe:	4a93      	ldr	r2, [pc, #588]	; (8001f0c <HAL_RCC_OscConfig+0x4f4>)
 8001cc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cc4:	61d3      	str	r3, [r2, #28]
 8001cc6:	4b91      	ldr	r3, [pc, #580]	; (8001f0c <HAL_RCC_OscConfig+0x4f4>)
 8001cc8:	69db      	ldr	r3, [r3, #28]
 8001cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cce:	60bb      	str	r3, [r7, #8]
 8001cd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cd6:	4b8e      	ldr	r3, [pc, #568]	; (8001f10 <HAL_RCC_OscConfig+0x4f8>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d118      	bne.n	8001d14 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ce2:	4b8b      	ldr	r3, [pc, #556]	; (8001f10 <HAL_RCC_OscConfig+0x4f8>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a8a      	ldr	r2, [pc, #552]	; (8001f10 <HAL_RCC_OscConfig+0x4f8>)
 8001ce8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cee:	f7ff fb95 	bl	800141c <HAL_GetTick>
 8001cf2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cf4:	e008      	b.n	8001d08 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cf6:	f7ff fb91 	bl	800141c <HAL_GetTick>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	2b64      	cmp	r3, #100	; 0x64
 8001d02:	d901      	bls.n	8001d08 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d04:	2303      	movs	r3, #3
 8001d06:	e0fd      	b.n	8001f04 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d08:	4b81      	ldr	r3, [pc, #516]	; (8001f10 <HAL_RCC_OscConfig+0x4f8>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d0f0      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d106      	bne.n	8001d2a <HAL_RCC_OscConfig+0x312>
 8001d1c:	4b7b      	ldr	r3, [pc, #492]	; (8001f0c <HAL_RCC_OscConfig+0x4f4>)
 8001d1e:	6a1b      	ldr	r3, [r3, #32]
 8001d20:	4a7a      	ldr	r2, [pc, #488]	; (8001f0c <HAL_RCC_OscConfig+0x4f4>)
 8001d22:	f043 0301 	orr.w	r3, r3, #1
 8001d26:	6213      	str	r3, [r2, #32]
 8001d28:	e02d      	b.n	8001d86 <HAL_RCC_OscConfig+0x36e>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d10c      	bne.n	8001d4c <HAL_RCC_OscConfig+0x334>
 8001d32:	4b76      	ldr	r3, [pc, #472]	; (8001f0c <HAL_RCC_OscConfig+0x4f4>)
 8001d34:	6a1b      	ldr	r3, [r3, #32]
 8001d36:	4a75      	ldr	r2, [pc, #468]	; (8001f0c <HAL_RCC_OscConfig+0x4f4>)
 8001d38:	f023 0301 	bic.w	r3, r3, #1
 8001d3c:	6213      	str	r3, [r2, #32]
 8001d3e:	4b73      	ldr	r3, [pc, #460]	; (8001f0c <HAL_RCC_OscConfig+0x4f4>)
 8001d40:	6a1b      	ldr	r3, [r3, #32]
 8001d42:	4a72      	ldr	r2, [pc, #456]	; (8001f0c <HAL_RCC_OscConfig+0x4f4>)
 8001d44:	f023 0304 	bic.w	r3, r3, #4
 8001d48:	6213      	str	r3, [r2, #32]
 8001d4a:	e01c      	b.n	8001d86 <HAL_RCC_OscConfig+0x36e>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	2b05      	cmp	r3, #5
 8001d52:	d10c      	bne.n	8001d6e <HAL_RCC_OscConfig+0x356>
 8001d54:	4b6d      	ldr	r3, [pc, #436]	; (8001f0c <HAL_RCC_OscConfig+0x4f4>)
 8001d56:	6a1b      	ldr	r3, [r3, #32]
 8001d58:	4a6c      	ldr	r2, [pc, #432]	; (8001f0c <HAL_RCC_OscConfig+0x4f4>)
 8001d5a:	f043 0304 	orr.w	r3, r3, #4
 8001d5e:	6213      	str	r3, [r2, #32]
 8001d60:	4b6a      	ldr	r3, [pc, #424]	; (8001f0c <HAL_RCC_OscConfig+0x4f4>)
 8001d62:	6a1b      	ldr	r3, [r3, #32]
 8001d64:	4a69      	ldr	r2, [pc, #420]	; (8001f0c <HAL_RCC_OscConfig+0x4f4>)
 8001d66:	f043 0301 	orr.w	r3, r3, #1
 8001d6a:	6213      	str	r3, [r2, #32]
 8001d6c:	e00b      	b.n	8001d86 <HAL_RCC_OscConfig+0x36e>
 8001d6e:	4b67      	ldr	r3, [pc, #412]	; (8001f0c <HAL_RCC_OscConfig+0x4f4>)
 8001d70:	6a1b      	ldr	r3, [r3, #32]
 8001d72:	4a66      	ldr	r2, [pc, #408]	; (8001f0c <HAL_RCC_OscConfig+0x4f4>)
 8001d74:	f023 0301 	bic.w	r3, r3, #1
 8001d78:	6213      	str	r3, [r2, #32]
 8001d7a:	4b64      	ldr	r3, [pc, #400]	; (8001f0c <HAL_RCC_OscConfig+0x4f4>)
 8001d7c:	6a1b      	ldr	r3, [r3, #32]
 8001d7e:	4a63      	ldr	r2, [pc, #396]	; (8001f0c <HAL_RCC_OscConfig+0x4f4>)
 8001d80:	f023 0304 	bic.w	r3, r3, #4
 8001d84:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d015      	beq.n	8001dba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d8e:	f7ff fb45 	bl	800141c <HAL_GetTick>
 8001d92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d94:	e00a      	b.n	8001dac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d96:	f7ff fb41 	bl	800141c <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d901      	bls.n	8001dac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001da8:	2303      	movs	r3, #3
 8001daa:	e0ab      	b.n	8001f04 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dac:	4b57      	ldr	r3, [pc, #348]	; (8001f0c <HAL_RCC_OscConfig+0x4f4>)
 8001dae:	6a1b      	ldr	r3, [r3, #32]
 8001db0:	f003 0302 	and.w	r3, r3, #2
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d0ee      	beq.n	8001d96 <HAL_RCC_OscConfig+0x37e>
 8001db8:	e014      	b.n	8001de4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dba:	f7ff fb2f 	bl	800141c <HAL_GetTick>
 8001dbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dc0:	e00a      	b.n	8001dd8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dc2:	f7ff fb2b 	bl	800141c <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d901      	bls.n	8001dd8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e095      	b.n	8001f04 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dd8:	4b4c      	ldr	r3, [pc, #304]	; (8001f0c <HAL_RCC_OscConfig+0x4f4>)
 8001dda:	6a1b      	ldr	r3, [r3, #32]
 8001ddc:	f003 0302 	and.w	r3, r3, #2
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d1ee      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001de4:	7dfb      	ldrb	r3, [r7, #23]
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d105      	bne.n	8001df6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dea:	4b48      	ldr	r3, [pc, #288]	; (8001f0c <HAL_RCC_OscConfig+0x4f4>)
 8001dec:	69db      	ldr	r3, [r3, #28]
 8001dee:	4a47      	ldr	r2, [pc, #284]	; (8001f0c <HAL_RCC_OscConfig+0x4f4>)
 8001df0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001df4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	69db      	ldr	r3, [r3, #28]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	f000 8081 	beq.w	8001f02 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e00:	4b42      	ldr	r3, [pc, #264]	; (8001f0c <HAL_RCC_OscConfig+0x4f4>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f003 030c 	and.w	r3, r3, #12
 8001e08:	2b08      	cmp	r3, #8
 8001e0a:	d061      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	69db      	ldr	r3, [r3, #28]
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d146      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e14:	4b3f      	ldr	r3, [pc, #252]	; (8001f14 <HAL_RCC_OscConfig+0x4fc>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e1a:	f7ff faff 	bl	800141c <HAL_GetTick>
 8001e1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e20:	e008      	b.n	8001e34 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e22:	f7ff fafb 	bl	800141c <HAL_GetTick>
 8001e26:	4602      	mov	r2, r0
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d901      	bls.n	8001e34 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e30:	2303      	movs	r3, #3
 8001e32:	e067      	b.n	8001f04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e34:	4b35      	ldr	r3, [pc, #212]	; (8001f0c <HAL_RCC_OscConfig+0x4f4>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d1f0      	bne.n	8001e22 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6a1b      	ldr	r3, [r3, #32]
 8001e44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e48:	d108      	bne.n	8001e5c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e4a:	4b30      	ldr	r3, [pc, #192]	; (8001f0c <HAL_RCC_OscConfig+0x4f4>)
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	492d      	ldr	r1, [pc, #180]	; (8001f0c <HAL_RCC_OscConfig+0x4f4>)
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e5c:	4b2b      	ldr	r3, [pc, #172]	; (8001f0c <HAL_RCC_OscConfig+0x4f4>)
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6a19      	ldr	r1, [r3, #32]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6c:	430b      	orrs	r3, r1
 8001e6e:	4927      	ldr	r1, [pc, #156]	; (8001f0c <HAL_RCC_OscConfig+0x4f4>)
 8001e70:	4313      	orrs	r3, r2
 8001e72:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e74:	4b27      	ldr	r3, [pc, #156]	; (8001f14 <HAL_RCC_OscConfig+0x4fc>)
 8001e76:	2201      	movs	r2, #1
 8001e78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e7a:	f7ff facf 	bl	800141c <HAL_GetTick>
 8001e7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e80:	e008      	b.n	8001e94 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e82:	f7ff facb 	bl	800141c <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d901      	bls.n	8001e94 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e037      	b.n	8001f04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e94:	4b1d      	ldr	r3, [pc, #116]	; (8001f0c <HAL_RCC_OscConfig+0x4f4>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d0f0      	beq.n	8001e82 <HAL_RCC_OscConfig+0x46a>
 8001ea0:	e02f      	b.n	8001f02 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ea2:	4b1c      	ldr	r3, [pc, #112]	; (8001f14 <HAL_RCC_OscConfig+0x4fc>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea8:	f7ff fab8 	bl	800141c <HAL_GetTick>
 8001eac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eae:	e008      	b.n	8001ec2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eb0:	f7ff fab4 	bl	800141c <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e020      	b.n	8001f04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ec2:	4b12      	ldr	r3, [pc, #72]	; (8001f0c <HAL_RCC_OscConfig+0x4f4>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d1f0      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x498>
 8001ece:	e018      	b.n	8001f02 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	69db      	ldr	r3, [r3, #28]
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d101      	bne.n	8001edc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e013      	b.n	8001f04 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001edc:	4b0b      	ldr	r3, [pc, #44]	; (8001f0c <HAL_RCC_OscConfig+0x4f4>)
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6a1b      	ldr	r3, [r3, #32]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d106      	bne.n	8001efe <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d001      	beq.n	8001f02 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e000      	b.n	8001f04 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001f02:	2300      	movs	r3, #0
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3718      	adds	r7, #24
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	40021000 	.word	0x40021000
 8001f10:	40007000 	.word	0x40007000
 8001f14:	42420060 	.word	0x42420060

08001f18 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d101      	bne.n	8001f2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e0d0      	b.n	80020ce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f2c:	4b6a      	ldr	r3, [pc, #424]	; (80020d8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0307 	and.w	r3, r3, #7
 8001f34:	683a      	ldr	r2, [r7, #0]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d910      	bls.n	8001f5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f3a:	4b67      	ldr	r3, [pc, #412]	; (80020d8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f023 0207 	bic.w	r2, r3, #7
 8001f42:	4965      	ldr	r1, [pc, #404]	; (80020d8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f4a:	4b63      	ldr	r3, [pc, #396]	; (80020d8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0307 	and.w	r3, r3, #7
 8001f52:	683a      	ldr	r2, [r7, #0]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d001      	beq.n	8001f5c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e0b8      	b.n	80020ce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0302 	and.w	r3, r3, #2
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d020      	beq.n	8001faa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0304 	and.w	r3, r3, #4
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d005      	beq.n	8001f80 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f74:	4b59      	ldr	r3, [pc, #356]	; (80020dc <HAL_RCC_ClockConfig+0x1c4>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	4a58      	ldr	r2, [pc, #352]	; (80020dc <HAL_RCC_ClockConfig+0x1c4>)
 8001f7a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f7e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0308 	and.w	r3, r3, #8
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d005      	beq.n	8001f98 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f8c:	4b53      	ldr	r3, [pc, #332]	; (80020dc <HAL_RCC_ClockConfig+0x1c4>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	4a52      	ldr	r2, [pc, #328]	; (80020dc <HAL_RCC_ClockConfig+0x1c4>)
 8001f92:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f96:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f98:	4b50      	ldr	r3, [pc, #320]	; (80020dc <HAL_RCC_ClockConfig+0x1c4>)
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	494d      	ldr	r1, [pc, #308]	; (80020dc <HAL_RCC_ClockConfig+0x1c4>)
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0301 	and.w	r3, r3, #1
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d040      	beq.n	8002038 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d107      	bne.n	8001fce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fbe:	4b47      	ldr	r3, [pc, #284]	; (80020dc <HAL_RCC_ClockConfig+0x1c4>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d115      	bne.n	8001ff6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e07f      	b.n	80020ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d107      	bne.n	8001fe6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fd6:	4b41      	ldr	r3, [pc, #260]	; (80020dc <HAL_RCC_ClockConfig+0x1c4>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d109      	bne.n	8001ff6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e073      	b.n	80020ce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fe6:	4b3d      	ldr	r3, [pc, #244]	; (80020dc <HAL_RCC_ClockConfig+0x1c4>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0302 	and.w	r3, r3, #2
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d101      	bne.n	8001ff6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e06b      	b.n	80020ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ff6:	4b39      	ldr	r3, [pc, #228]	; (80020dc <HAL_RCC_ClockConfig+0x1c4>)
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f023 0203 	bic.w	r2, r3, #3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	4936      	ldr	r1, [pc, #216]	; (80020dc <HAL_RCC_ClockConfig+0x1c4>)
 8002004:	4313      	orrs	r3, r2
 8002006:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002008:	f7ff fa08 	bl	800141c <HAL_GetTick>
 800200c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800200e:	e00a      	b.n	8002026 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002010:	f7ff fa04 	bl	800141c <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	f241 3288 	movw	r2, #5000	; 0x1388
 800201e:	4293      	cmp	r3, r2
 8002020:	d901      	bls.n	8002026 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e053      	b.n	80020ce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002026:	4b2d      	ldr	r3, [pc, #180]	; (80020dc <HAL_RCC_ClockConfig+0x1c4>)
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f003 020c 	and.w	r2, r3, #12
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	429a      	cmp	r2, r3
 8002036:	d1eb      	bne.n	8002010 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002038:	4b27      	ldr	r3, [pc, #156]	; (80020d8 <HAL_RCC_ClockConfig+0x1c0>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0307 	and.w	r3, r3, #7
 8002040:	683a      	ldr	r2, [r7, #0]
 8002042:	429a      	cmp	r2, r3
 8002044:	d210      	bcs.n	8002068 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002046:	4b24      	ldr	r3, [pc, #144]	; (80020d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f023 0207 	bic.w	r2, r3, #7
 800204e:	4922      	ldr	r1, [pc, #136]	; (80020d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	4313      	orrs	r3, r2
 8002054:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002056:	4b20      	ldr	r3, [pc, #128]	; (80020d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0307 	and.w	r3, r3, #7
 800205e:	683a      	ldr	r2, [r7, #0]
 8002060:	429a      	cmp	r2, r3
 8002062:	d001      	beq.n	8002068 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e032      	b.n	80020ce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0304 	and.w	r3, r3, #4
 8002070:	2b00      	cmp	r3, #0
 8002072:	d008      	beq.n	8002086 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002074:	4b19      	ldr	r3, [pc, #100]	; (80020dc <HAL_RCC_ClockConfig+0x1c4>)
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	4916      	ldr	r1, [pc, #88]	; (80020dc <HAL_RCC_ClockConfig+0x1c4>)
 8002082:	4313      	orrs	r3, r2
 8002084:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0308 	and.w	r3, r3, #8
 800208e:	2b00      	cmp	r3, #0
 8002090:	d009      	beq.n	80020a6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002092:	4b12      	ldr	r3, [pc, #72]	; (80020dc <HAL_RCC_ClockConfig+0x1c4>)
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	691b      	ldr	r3, [r3, #16]
 800209e:	00db      	lsls	r3, r3, #3
 80020a0:	490e      	ldr	r1, [pc, #56]	; (80020dc <HAL_RCC_ClockConfig+0x1c4>)
 80020a2:	4313      	orrs	r3, r2
 80020a4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020a6:	f000 f821 	bl	80020ec <HAL_RCC_GetSysClockFreq>
 80020aa:	4602      	mov	r2, r0
 80020ac:	4b0b      	ldr	r3, [pc, #44]	; (80020dc <HAL_RCC_ClockConfig+0x1c4>)
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	091b      	lsrs	r3, r3, #4
 80020b2:	f003 030f 	and.w	r3, r3, #15
 80020b6:	490a      	ldr	r1, [pc, #40]	; (80020e0 <HAL_RCC_ClockConfig+0x1c8>)
 80020b8:	5ccb      	ldrb	r3, [r1, r3]
 80020ba:	fa22 f303 	lsr.w	r3, r2, r3
 80020be:	4a09      	ldr	r2, [pc, #36]	; (80020e4 <HAL_RCC_ClockConfig+0x1cc>)
 80020c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80020c2:	4b09      	ldr	r3, [pc, #36]	; (80020e8 <HAL_RCC_ClockConfig+0x1d0>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7ff f966 	bl	8001398 <HAL_InitTick>

  return HAL_OK;
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3710      	adds	r7, #16
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	40022000 	.word	0x40022000
 80020dc:	40021000 	.word	0x40021000
 80020e0:	08002a30 	.word	0x08002a30
 80020e4:	20000024 	.word	0x20000024
 80020e8:	2000002c 	.word	0x2000002c

080020ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020ec:	b490      	push	{r4, r7}
 80020ee:	b08a      	sub	sp, #40	; 0x28
 80020f0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80020f2:	4b2a      	ldr	r3, [pc, #168]	; (800219c <HAL_RCC_GetSysClockFreq+0xb0>)
 80020f4:	1d3c      	adds	r4, r7, #4
 80020f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80020fc:	f240 2301 	movw	r3, #513	; 0x201
 8002100:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002102:	2300      	movs	r3, #0
 8002104:	61fb      	str	r3, [r7, #28]
 8002106:	2300      	movs	r3, #0
 8002108:	61bb      	str	r3, [r7, #24]
 800210a:	2300      	movs	r3, #0
 800210c:	627b      	str	r3, [r7, #36]	; 0x24
 800210e:	2300      	movs	r3, #0
 8002110:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002112:	2300      	movs	r3, #0
 8002114:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002116:	4b22      	ldr	r3, [pc, #136]	; (80021a0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	f003 030c 	and.w	r3, r3, #12
 8002122:	2b04      	cmp	r3, #4
 8002124:	d002      	beq.n	800212c <HAL_RCC_GetSysClockFreq+0x40>
 8002126:	2b08      	cmp	r3, #8
 8002128:	d003      	beq.n	8002132 <HAL_RCC_GetSysClockFreq+0x46>
 800212a:	e02d      	b.n	8002188 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800212c:	4b1d      	ldr	r3, [pc, #116]	; (80021a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800212e:	623b      	str	r3, [r7, #32]
      break;
 8002130:	e02d      	b.n	800218e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	0c9b      	lsrs	r3, r3, #18
 8002136:	f003 030f 	and.w	r3, r3, #15
 800213a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800213e:	4413      	add	r3, r2
 8002140:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002144:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d013      	beq.n	8002178 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002150:	4b13      	ldr	r3, [pc, #76]	; (80021a0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	0c5b      	lsrs	r3, r3, #17
 8002156:	f003 0301 	and.w	r3, r3, #1
 800215a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800215e:	4413      	add	r3, r2
 8002160:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002164:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	4a0e      	ldr	r2, [pc, #56]	; (80021a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800216a:	fb02 f203 	mul.w	r2, r2, r3
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	fbb2 f3f3 	udiv	r3, r2, r3
 8002174:	627b      	str	r3, [r7, #36]	; 0x24
 8002176:	e004      	b.n	8002182 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	4a0b      	ldr	r2, [pc, #44]	; (80021a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800217c:	fb02 f303 	mul.w	r3, r2, r3
 8002180:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002184:	623b      	str	r3, [r7, #32]
      break;
 8002186:	e002      	b.n	800218e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002188:	4b06      	ldr	r3, [pc, #24]	; (80021a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800218a:	623b      	str	r3, [r7, #32]
      break;
 800218c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800218e:	6a3b      	ldr	r3, [r7, #32]
}
 8002190:	4618      	mov	r0, r3
 8002192:	3728      	adds	r7, #40	; 0x28
 8002194:	46bd      	mov	sp, r7
 8002196:	bc90      	pop	{r4, r7}
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	08002a20 	.word	0x08002a20
 80021a0:	40021000 	.word	0x40021000
 80021a4:	007a1200 	.word	0x007a1200
 80021a8:	003d0900 	.word	0x003d0900

080021ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b085      	sub	sp, #20
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80021b4:	4b0a      	ldr	r3, [pc, #40]	; (80021e0 <RCC_Delay+0x34>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a0a      	ldr	r2, [pc, #40]	; (80021e4 <RCC_Delay+0x38>)
 80021ba:	fba2 2303 	umull	r2, r3, r2, r3
 80021be:	0a5b      	lsrs	r3, r3, #9
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	fb02 f303 	mul.w	r3, r2, r3
 80021c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80021c8:	bf00      	nop
  }
  while (Delay --);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	1e5a      	subs	r2, r3, #1
 80021ce:	60fa      	str	r2, [r7, #12]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d1f9      	bne.n	80021c8 <RCC_Delay+0x1c>
}
 80021d4:	bf00      	nop
 80021d6:	bf00      	nop
 80021d8:	3714      	adds	r7, #20
 80021da:	46bd      	mov	sp, r7
 80021dc:	bc80      	pop	{r7}
 80021de:	4770      	bx	lr
 80021e0:	20000024 	.word	0x20000024
 80021e4:	10624dd3 	.word	0x10624dd3

080021e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d101      	bne.n	80021fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e041      	b.n	800227e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002200:	b2db      	uxtb	r3, r3
 8002202:	2b00      	cmp	r3, #0
 8002204:	d106      	bne.n	8002214 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f7fe fe86 	bl	8000f20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2202      	movs	r2, #2
 8002218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	3304      	adds	r3, #4
 8002224:	4619      	mov	r1, r3
 8002226:	4610      	mov	r0, r2
 8002228:	f000 fa6a 	bl	8002700 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2201      	movs	r2, #1
 8002230:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2201      	movs	r2, #1
 8002240:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2201      	movs	r2, #1
 8002248:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2201      	movs	r2, #1
 8002258:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2201      	movs	r2, #1
 8002260:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2201      	movs	r2, #1
 8002268:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2201      	movs	r2, #1
 8002270:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2201      	movs	r2, #1
 8002278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	3708      	adds	r7, #8
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
	...

08002288 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002288:	b480      	push	{r7}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002296:	b2db      	uxtb	r3, r3
 8002298:	2b01      	cmp	r3, #1
 800229a:	d001      	beq.n	80022a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e035      	b.n	800230c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2202      	movs	r2, #2
 80022a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	68da      	ldr	r2, [r3, #12]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f042 0201 	orr.w	r2, r2, #1
 80022b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a16      	ldr	r2, [pc, #88]	; (8002318 <HAL_TIM_Base_Start_IT+0x90>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d009      	beq.n	80022d6 <HAL_TIM_Base_Start_IT+0x4e>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022ca:	d004      	beq.n	80022d6 <HAL_TIM_Base_Start_IT+0x4e>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a12      	ldr	r2, [pc, #72]	; (800231c <HAL_TIM_Base_Start_IT+0x94>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d111      	bne.n	80022fa <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f003 0307 	and.w	r3, r3, #7
 80022e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2b06      	cmp	r3, #6
 80022e6:	d010      	beq.n	800230a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f042 0201 	orr.w	r2, r2, #1
 80022f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022f8:	e007      	b.n	800230a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f042 0201 	orr.w	r2, r2, #1
 8002308:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800230a:	2300      	movs	r3, #0
}
 800230c:	4618      	mov	r0, r3
 800230e:	3714      	adds	r7, #20
 8002310:	46bd      	mov	sp, r7
 8002312:	bc80      	pop	{r7}
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	40012c00 	.word	0x40012c00
 800231c:	40000400 	.word	0x40000400

08002320 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	691b      	ldr	r3, [r3, #16]
 800232e:	f003 0302 	and.w	r3, r3, #2
 8002332:	2b02      	cmp	r3, #2
 8002334:	d122      	bne.n	800237c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	f003 0302 	and.w	r3, r3, #2
 8002340:	2b02      	cmp	r3, #2
 8002342:	d11b      	bne.n	800237c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f06f 0202 	mvn.w	r2, #2
 800234c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2201      	movs	r2, #1
 8002352:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	699b      	ldr	r3, [r3, #24]
 800235a:	f003 0303 	and.w	r3, r3, #3
 800235e:	2b00      	cmp	r3, #0
 8002360:	d003      	beq.n	800236a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f000 f9b1 	bl	80026ca <HAL_TIM_IC_CaptureCallback>
 8002368:	e005      	b.n	8002376 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f000 f9a4 	bl	80026b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f000 f9b3 	bl	80026dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	691b      	ldr	r3, [r3, #16]
 8002382:	f003 0304 	and.w	r3, r3, #4
 8002386:	2b04      	cmp	r3, #4
 8002388:	d122      	bne.n	80023d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	f003 0304 	and.w	r3, r3, #4
 8002394:	2b04      	cmp	r3, #4
 8002396:	d11b      	bne.n	80023d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f06f 0204 	mvn.w	r2, #4
 80023a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2202      	movs	r2, #2
 80023a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	699b      	ldr	r3, [r3, #24]
 80023ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d003      	beq.n	80023be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f000 f987 	bl	80026ca <HAL_TIM_IC_CaptureCallback>
 80023bc:	e005      	b.n	80023ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f000 f97a 	bl	80026b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f000 f989 	bl	80026dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	f003 0308 	and.w	r3, r3, #8
 80023da:	2b08      	cmp	r3, #8
 80023dc:	d122      	bne.n	8002424 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	f003 0308 	and.w	r3, r3, #8
 80023e8:	2b08      	cmp	r3, #8
 80023ea:	d11b      	bne.n	8002424 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f06f 0208 	mvn.w	r2, #8
 80023f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2204      	movs	r2, #4
 80023fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	69db      	ldr	r3, [r3, #28]
 8002402:	f003 0303 	and.w	r3, r3, #3
 8002406:	2b00      	cmp	r3, #0
 8002408:	d003      	beq.n	8002412 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f000 f95d 	bl	80026ca <HAL_TIM_IC_CaptureCallback>
 8002410:	e005      	b.n	800241e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f000 f950 	bl	80026b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f000 f95f 	bl	80026dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	f003 0310 	and.w	r3, r3, #16
 800242e:	2b10      	cmp	r3, #16
 8002430:	d122      	bne.n	8002478 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	f003 0310 	and.w	r3, r3, #16
 800243c:	2b10      	cmp	r3, #16
 800243e:	d11b      	bne.n	8002478 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f06f 0210 	mvn.w	r2, #16
 8002448:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2208      	movs	r2, #8
 800244e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	69db      	ldr	r3, [r3, #28]
 8002456:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800245a:	2b00      	cmp	r3, #0
 800245c:	d003      	beq.n	8002466 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f000 f933 	bl	80026ca <HAL_TIM_IC_CaptureCallback>
 8002464:	e005      	b.n	8002472 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f000 f926 	bl	80026b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f000 f935 	bl	80026dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	2b01      	cmp	r3, #1
 8002484:	d10e      	bne.n	80024a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	f003 0301 	and.w	r3, r3, #1
 8002490:	2b01      	cmp	r3, #1
 8002492:	d107      	bne.n	80024a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f06f 0201 	mvn.w	r2, #1
 800249c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f7fe fec0 	bl	8001224 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ae:	2b80      	cmp	r3, #128	; 0x80
 80024b0:	d10e      	bne.n	80024d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024bc:	2b80      	cmp	r3, #128	; 0x80
 80024be:	d107      	bne.n	80024d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80024c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f000 fa67 	bl	800299e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024da:	2b40      	cmp	r3, #64	; 0x40
 80024dc:	d10e      	bne.n	80024fc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024e8:	2b40      	cmp	r3, #64	; 0x40
 80024ea:	d107      	bne.n	80024fc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80024f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f000 f8f9 	bl	80026ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	f003 0320 	and.w	r3, r3, #32
 8002506:	2b20      	cmp	r3, #32
 8002508:	d10e      	bne.n	8002528 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	f003 0320 	and.w	r3, r3, #32
 8002514:	2b20      	cmp	r3, #32
 8002516:	d107      	bne.n	8002528 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f06f 0220 	mvn.w	r2, #32
 8002520:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f000 fa32 	bl	800298c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002528:	bf00      	nop
 800252a:	3708      	adds	r7, #8
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002540:	2b01      	cmp	r3, #1
 8002542:	d101      	bne.n	8002548 <HAL_TIM_ConfigClockSource+0x18>
 8002544:	2302      	movs	r3, #2
 8002546:	e0b3      	b.n	80026b0 <HAL_TIM_ConfigClockSource+0x180>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2202      	movs	r2, #2
 8002554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002566:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800256e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	68fa      	ldr	r2, [r7, #12]
 8002576:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002580:	d03e      	beq.n	8002600 <HAL_TIM_ConfigClockSource+0xd0>
 8002582:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002586:	f200 8087 	bhi.w	8002698 <HAL_TIM_ConfigClockSource+0x168>
 800258a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800258e:	f000 8085 	beq.w	800269c <HAL_TIM_ConfigClockSource+0x16c>
 8002592:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002596:	d87f      	bhi.n	8002698 <HAL_TIM_ConfigClockSource+0x168>
 8002598:	2b70      	cmp	r3, #112	; 0x70
 800259a:	d01a      	beq.n	80025d2 <HAL_TIM_ConfigClockSource+0xa2>
 800259c:	2b70      	cmp	r3, #112	; 0x70
 800259e:	d87b      	bhi.n	8002698 <HAL_TIM_ConfigClockSource+0x168>
 80025a0:	2b60      	cmp	r3, #96	; 0x60
 80025a2:	d050      	beq.n	8002646 <HAL_TIM_ConfigClockSource+0x116>
 80025a4:	2b60      	cmp	r3, #96	; 0x60
 80025a6:	d877      	bhi.n	8002698 <HAL_TIM_ConfigClockSource+0x168>
 80025a8:	2b50      	cmp	r3, #80	; 0x50
 80025aa:	d03c      	beq.n	8002626 <HAL_TIM_ConfigClockSource+0xf6>
 80025ac:	2b50      	cmp	r3, #80	; 0x50
 80025ae:	d873      	bhi.n	8002698 <HAL_TIM_ConfigClockSource+0x168>
 80025b0:	2b40      	cmp	r3, #64	; 0x40
 80025b2:	d058      	beq.n	8002666 <HAL_TIM_ConfigClockSource+0x136>
 80025b4:	2b40      	cmp	r3, #64	; 0x40
 80025b6:	d86f      	bhi.n	8002698 <HAL_TIM_ConfigClockSource+0x168>
 80025b8:	2b30      	cmp	r3, #48	; 0x30
 80025ba:	d064      	beq.n	8002686 <HAL_TIM_ConfigClockSource+0x156>
 80025bc:	2b30      	cmp	r3, #48	; 0x30
 80025be:	d86b      	bhi.n	8002698 <HAL_TIM_ConfigClockSource+0x168>
 80025c0:	2b20      	cmp	r3, #32
 80025c2:	d060      	beq.n	8002686 <HAL_TIM_ConfigClockSource+0x156>
 80025c4:	2b20      	cmp	r3, #32
 80025c6:	d867      	bhi.n	8002698 <HAL_TIM_ConfigClockSource+0x168>
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d05c      	beq.n	8002686 <HAL_TIM_ConfigClockSource+0x156>
 80025cc:	2b10      	cmp	r3, #16
 80025ce:	d05a      	beq.n	8002686 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80025d0:	e062      	b.n	8002698 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6818      	ldr	r0, [r3, #0]
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	6899      	ldr	r1, [r3, #8]
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	685a      	ldr	r2, [r3, #4]
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	f000 f95c 	bl	800289e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80025f4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	68fa      	ldr	r2, [r7, #12]
 80025fc:	609a      	str	r2, [r3, #8]
      break;
 80025fe:	e04e      	b.n	800269e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6818      	ldr	r0, [r3, #0]
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	6899      	ldr	r1, [r3, #8]
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685a      	ldr	r2, [r3, #4]
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	f000 f945 	bl	800289e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	689a      	ldr	r2, [r3, #8]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002622:	609a      	str	r2, [r3, #8]
      break;
 8002624:	e03b      	b.n	800269e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6818      	ldr	r0, [r3, #0]
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	6859      	ldr	r1, [r3, #4]
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	461a      	mov	r2, r3
 8002634:	f000 f8bc 	bl	80027b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2150      	movs	r1, #80	; 0x50
 800263e:	4618      	mov	r0, r3
 8002640:	f000 f913 	bl	800286a <TIM_ITRx_SetConfig>
      break;
 8002644:	e02b      	b.n	800269e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6818      	ldr	r0, [r3, #0]
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	6859      	ldr	r1, [r3, #4]
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	461a      	mov	r2, r3
 8002654:	f000 f8da 	bl	800280c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	2160      	movs	r1, #96	; 0x60
 800265e:	4618      	mov	r0, r3
 8002660:	f000 f903 	bl	800286a <TIM_ITRx_SetConfig>
      break;
 8002664:	e01b      	b.n	800269e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6818      	ldr	r0, [r3, #0]
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	6859      	ldr	r1, [r3, #4]
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	461a      	mov	r2, r3
 8002674:	f000 f89c 	bl	80027b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2140      	movs	r1, #64	; 0x40
 800267e:	4618      	mov	r0, r3
 8002680:	f000 f8f3 	bl	800286a <TIM_ITRx_SetConfig>
      break;
 8002684:	e00b      	b.n	800269e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4619      	mov	r1, r3
 8002690:	4610      	mov	r0, r2
 8002692:	f000 f8ea 	bl	800286a <TIM_ITRx_SetConfig>
        break;
 8002696:	e002      	b.n	800269e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002698:	bf00      	nop
 800269a:	e000      	b.n	800269e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800269c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2201      	movs	r2, #1
 80026a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80026ae:	2300      	movs	r3, #0
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3710      	adds	r7, #16
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80026c0:	bf00      	nop
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bc80      	pop	{r7}
 80026c8:	4770      	bx	lr

080026ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80026ca:	b480      	push	{r7}
 80026cc:	b083      	sub	sp, #12
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80026d2:	bf00      	nop
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bc80      	pop	{r7}
 80026da:	4770      	bx	lr

080026dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80026e4:	bf00      	nop
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bc80      	pop	{r7}
 80026ec:	4770      	bx	lr

080026ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80026ee:	b480      	push	{r7}
 80026f0:	b083      	sub	sp, #12
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80026f6:	bf00      	nop
 80026f8:	370c      	adds	r7, #12
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bc80      	pop	{r7}
 80026fe:	4770      	bx	lr

08002700 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002700:	b480      	push	{r7}
 8002702:	b085      	sub	sp, #20
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	4a25      	ldr	r2, [pc, #148]	; (80027a8 <TIM_Base_SetConfig+0xa8>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d007      	beq.n	8002728 <TIM_Base_SetConfig+0x28>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800271e:	d003      	beq.n	8002728 <TIM_Base_SetConfig+0x28>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	4a22      	ldr	r2, [pc, #136]	; (80027ac <TIM_Base_SetConfig+0xac>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d108      	bne.n	800273a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800272e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	68fa      	ldr	r2, [r7, #12]
 8002736:	4313      	orrs	r3, r2
 8002738:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a1a      	ldr	r2, [pc, #104]	; (80027a8 <TIM_Base_SetConfig+0xa8>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d007      	beq.n	8002752 <TIM_Base_SetConfig+0x52>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002748:	d003      	beq.n	8002752 <TIM_Base_SetConfig+0x52>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a17      	ldr	r2, [pc, #92]	; (80027ac <TIM_Base_SetConfig+0xac>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d108      	bne.n	8002764 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002758:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	68fa      	ldr	r2, [r7, #12]
 8002760:	4313      	orrs	r3, r2
 8002762:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	695b      	ldr	r3, [r3, #20]
 800276e:	4313      	orrs	r3, r2
 8002770:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	68fa      	ldr	r2, [r7, #12]
 8002776:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	689a      	ldr	r2, [r3, #8]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	4a07      	ldr	r2, [pc, #28]	; (80027a8 <TIM_Base_SetConfig+0xa8>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d103      	bne.n	8002798 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	691a      	ldr	r2, [r3, #16]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2201      	movs	r2, #1
 800279c:	615a      	str	r2, [r3, #20]
}
 800279e:	bf00      	nop
 80027a0:	3714      	adds	r7, #20
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bc80      	pop	{r7}
 80027a6:	4770      	bx	lr
 80027a8:	40012c00 	.word	0x40012c00
 80027ac:	40000400 	.word	0x40000400

080027b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b087      	sub	sp, #28
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6a1b      	ldr	r3, [r3, #32]
 80027c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6a1b      	ldr	r3, [r3, #32]
 80027c6:	f023 0201 	bic.w	r2, r3, #1
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	699b      	ldr	r3, [r3, #24]
 80027d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	011b      	lsls	r3, r3, #4
 80027e0:	693a      	ldr	r2, [r7, #16]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	f023 030a 	bic.w	r3, r3, #10
 80027ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80027ee:	697a      	ldr	r2, [r7, #20]
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	697a      	ldr	r2, [r7, #20]
 8002800:	621a      	str	r2, [r3, #32]
}
 8002802:	bf00      	nop
 8002804:	371c      	adds	r7, #28
 8002806:	46bd      	mov	sp, r7
 8002808:	bc80      	pop	{r7}
 800280a:	4770      	bx	lr

0800280c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800280c:	b480      	push	{r7}
 800280e:	b087      	sub	sp, #28
 8002810:	af00      	add	r7, sp, #0
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	60b9      	str	r1, [r7, #8]
 8002816:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6a1b      	ldr	r3, [r3, #32]
 800281c:	f023 0210 	bic.w	r2, r3, #16
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	699b      	ldr	r3, [r3, #24]
 8002828:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	6a1b      	ldr	r3, [r3, #32]
 800282e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002836:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	031b      	lsls	r3, r3, #12
 800283c:	697a      	ldr	r2, [r7, #20]
 800283e:	4313      	orrs	r3, r2
 8002840:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002848:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	011b      	lsls	r3, r3, #4
 800284e:	693a      	ldr	r2, [r7, #16]
 8002850:	4313      	orrs	r3, r2
 8002852:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	697a      	ldr	r2, [r7, #20]
 8002858:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	693a      	ldr	r2, [r7, #16]
 800285e:	621a      	str	r2, [r3, #32]
}
 8002860:	bf00      	nop
 8002862:	371c      	adds	r7, #28
 8002864:	46bd      	mov	sp, r7
 8002866:	bc80      	pop	{r7}
 8002868:	4770      	bx	lr

0800286a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800286a:	b480      	push	{r7}
 800286c:	b085      	sub	sp, #20
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
 8002872:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002880:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002882:	683a      	ldr	r2, [r7, #0]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	4313      	orrs	r3, r2
 8002888:	f043 0307 	orr.w	r3, r3, #7
 800288c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	68fa      	ldr	r2, [r7, #12]
 8002892:	609a      	str	r2, [r3, #8]
}
 8002894:	bf00      	nop
 8002896:	3714      	adds	r7, #20
 8002898:	46bd      	mov	sp, r7
 800289a:	bc80      	pop	{r7}
 800289c:	4770      	bx	lr

0800289e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800289e:	b480      	push	{r7}
 80028a0:	b087      	sub	sp, #28
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	60f8      	str	r0, [r7, #12]
 80028a6:	60b9      	str	r1, [r7, #8]
 80028a8:	607a      	str	r2, [r7, #4]
 80028aa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028b8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	021a      	lsls	r2, r3, #8
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	431a      	orrs	r2, r3
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	697a      	ldr	r2, [r7, #20]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	697a      	ldr	r2, [r7, #20]
 80028d0:	609a      	str	r2, [r3, #8]
}
 80028d2:	bf00      	nop
 80028d4:	371c      	adds	r7, #28
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bc80      	pop	{r7}
 80028da:	4770      	bx	lr

080028dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80028dc:	b480      	push	{r7}
 80028de:	b085      	sub	sp, #20
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d101      	bne.n	80028f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80028f0:	2302      	movs	r3, #2
 80028f2:	e041      	b.n	8002978 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2202      	movs	r2, #2
 8002900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800291a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	68fa      	ldr	r2, [r7, #12]
 8002922:	4313      	orrs	r3, r2
 8002924:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	68fa      	ldr	r2, [r7, #12]
 800292c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a14      	ldr	r2, [pc, #80]	; (8002984 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d009      	beq.n	800294c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002940:	d004      	beq.n	800294c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a10      	ldr	r2, [pc, #64]	; (8002988 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d10c      	bne.n	8002966 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002952:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	68ba      	ldr	r2, [r7, #8]
 800295a:	4313      	orrs	r3, r2
 800295c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	68ba      	ldr	r2, [r7, #8]
 8002964:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2201      	movs	r2, #1
 800296a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002976:	2300      	movs	r3, #0
}
 8002978:	4618      	mov	r0, r3
 800297a:	3714      	adds	r7, #20
 800297c:	46bd      	mov	sp, r7
 800297e:	bc80      	pop	{r7}
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	40012c00 	.word	0x40012c00
 8002988:	40000400 	.word	0x40000400

0800298c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002994:	bf00      	nop
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	bc80      	pop	{r7}
 800299c:	4770      	bx	lr

0800299e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800299e:	b480      	push	{r7}
 80029a0:	b083      	sub	sp, #12
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029a6:	bf00      	nop
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bc80      	pop	{r7}
 80029ae:	4770      	bx	lr

080029b0 <__libc_init_array>:
 80029b0:	b570      	push	{r4, r5, r6, lr}
 80029b2:	2600      	movs	r6, #0
 80029b4:	4d0c      	ldr	r5, [pc, #48]	; (80029e8 <__libc_init_array+0x38>)
 80029b6:	4c0d      	ldr	r4, [pc, #52]	; (80029ec <__libc_init_array+0x3c>)
 80029b8:	1b64      	subs	r4, r4, r5
 80029ba:	10a4      	asrs	r4, r4, #2
 80029bc:	42a6      	cmp	r6, r4
 80029be:	d109      	bne.n	80029d4 <__libc_init_array+0x24>
 80029c0:	f000 f822 	bl	8002a08 <_init>
 80029c4:	2600      	movs	r6, #0
 80029c6:	4d0a      	ldr	r5, [pc, #40]	; (80029f0 <__libc_init_array+0x40>)
 80029c8:	4c0a      	ldr	r4, [pc, #40]	; (80029f4 <__libc_init_array+0x44>)
 80029ca:	1b64      	subs	r4, r4, r5
 80029cc:	10a4      	asrs	r4, r4, #2
 80029ce:	42a6      	cmp	r6, r4
 80029d0:	d105      	bne.n	80029de <__libc_init_array+0x2e>
 80029d2:	bd70      	pop	{r4, r5, r6, pc}
 80029d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80029d8:	4798      	blx	r3
 80029da:	3601      	adds	r6, #1
 80029dc:	e7ee      	b.n	80029bc <__libc_init_array+0xc>
 80029de:	f855 3b04 	ldr.w	r3, [r5], #4
 80029e2:	4798      	blx	r3
 80029e4:	3601      	adds	r6, #1
 80029e6:	e7f2      	b.n	80029ce <__libc_init_array+0x1e>
 80029e8:	08002a40 	.word	0x08002a40
 80029ec:	08002a40 	.word	0x08002a40
 80029f0:	08002a40 	.word	0x08002a40
 80029f4:	08002a44 	.word	0x08002a44

080029f8 <memset>:
 80029f8:	4603      	mov	r3, r0
 80029fa:	4402      	add	r2, r0
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d100      	bne.n	8002a02 <memset+0xa>
 8002a00:	4770      	bx	lr
 8002a02:	f803 1b01 	strb.w	r1, [r3], #1
 8002a06:	e7f9      	b.n	80029fc <memset+0x4>

08002a08 <_init>:
 8002a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a0a:	bf00      	nop
 8002a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a0e:	bc08      	pop	{r3}
 8002a10:	469e      	mov	lr, r3
 8002a12:	4770      	bx	lr

08002a14 <_fini>:
 8002a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a16:	bf00      	nop
 8002a18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a1a:	bc08      	pop	{r3}
 8002a1c:	469e      	mov	lr, r3
 8002a1e:	4770      	bx	lr
